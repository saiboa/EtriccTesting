<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2019\enterprise\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="16.0">
 <Targets>
  <Target Name="C:\AutomaticTests514\bin\Debug\Egemin.Epia.Testing.TestTools.dll">
   <Modules>
    <Module Name="egemin.epia.testing.testtools.dll">
     <Messages>
      <Message Id="Egemin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Egemin' in assembly name 'Egemin.Epia.Testing.TestTools.dll'.</Issue>
      </Message>
      <Message Id="Epia" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Epia' in assembly name 'Egemin.Epia.Testing.TestTools.dll'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'Egemin.Epia.Testing.TestTools.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="Win32" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'Win32' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetAsyncKeyState(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetAsyncKeyState(Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'Win32.GetAsyncKeyState(Integer)' will be 4 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 2 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'Win32.GetAsyncKeyState(Integer)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 2 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeyboardState(System.Byte[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetKeyboardState(Byte())' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetKeyboardState(Byte())' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeyState(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetKeyState(Integer)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetKeyState(Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'Win32.GetKeyState(Integer)' will be 4 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 2 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'Win32.GetKeyState(Integer)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 2 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSystemMetrics(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetSystemMetrics(Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowLong(Win32+HWND,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetWindowLong(Win32.HWND, Integer)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetWindowLong(Win32.HWND, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#INVALID_HANDLE_VALUE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'Win32.INVALID_HANDLE_VALUE' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Keybd_event(System.Byte,System.Byte,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.Keybd_event(Byte, Byte, Integer, Integer)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.Keybd_event(Byte, Byte, Integer, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="3" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'extrainfo' of P/Invoke 'Win32.Keybd_event(Byte, Byte, Integer, Integer)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MapVirtualKey(System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.MapVirtualKey(Integer, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendInput(System.Int32,Win32+INPUT&amp;,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.SendInput(Integer, ByRef Win32.INPUT, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(Win32+HWND,System.Int32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.SendMessage(Win32.HWND, Integer, IntPtr, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.SendMessage(Win32.HWND, Integer, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(Win32+HWND,System.Int32,System.IntPtr,System.Text.StringBuilder)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.SendMessage(Win32.HWND, Integer, IntPtr, StringBuilder)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.SendMessage(Win32.HWND, Integer, IntPtr, StringBuilder)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="3" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lParam' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetKeyboardState(System.Byte[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.SetKeyboardState(Byte())' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.SetKeyboardState(Byte())' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Win32+HWND" Kind="Struct" Accessibility="Public" ExternallyVisible="False">
         <Members>
          <Member Name="#NULL" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_NULL()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Win32.cs" Line="115">'Win32.HWND.NULL.Get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="TestTools">
       <Types>
        <Type Name="AUICommon" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="AUI" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'AUI' in type name 'AUICommon' by changing it to 'Aui'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'AUICommon' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ErrorWindowHandling(System.Windows.Automation.AutomationElement,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="86">Method 'AUICommon.ErrorWindowHandling(AutomationElement, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Close button element not Found".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="72">Method 'AUICommon.ErrorWindowHandling(AutomationElement, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Error Message Element not Fund".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="80">Method 'AUICommon.ErrorWindowHandling(AutomationElement, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Error Msg is ------------:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="89">Method 'AUICommon.ErrorWindowHandling(AutomationElement, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "aeClose is found ------------:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="77">Method 'AUICommon.ErrorWindowHandling(AutomationElement, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "aeError is found ------------:".</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="65">Consider a design that does not require that 'errorMsg' be a reference parameter.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="65">In method 'AUICommon.ErrorWindowHandling(AutomationElement, ByRef String)', correct the spelling of 'Msg' in parameter name 'errorMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Msg" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="80">Correct the spelling of the unrecognized token 'Msg' in the literal '"Error Msg is ------------:"'.</Issue>
            </Message>
            <Message Id="aeClose" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="89">Correct the spelling of the unrecognized token 'aeClose' in the literal '"aeClose is found ------------:"'.</Issue>
            </Message>
            <Message Id="aeError" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="77">Correct the spelling of the unrecognized token 'aeError' in the literal '"aeError is found ------------:"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindTreeViewNodeLevel1(System.String,System.Windows.Automation.AutomationElement,System.String,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="246">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " --&gt;  Category ToolBar found ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="277">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " --&gt; , : found  ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="209">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " --&gt; shell main form : root param is null".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="205">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "--&gt; start to find : , - ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="240">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: ": aeToolBar not Found".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="263">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: ":failed find ,  New at time: ,  , try to fild C2Old ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="270">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: ":failed find ,  at time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="225">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: ":failed find menu list area at time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="302">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "aeTreeView node name is: --&gt;  ,  &lt;searching node&gt;:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="293">Method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "aeTreeView not found name".</Issue>
            </Message>
            <Message Id="4#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="201">Consider a design that does not require that 'message' be a reference parameter.</Issue>
            </Message>
            <Message Id="testcase" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="201">In method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)', correct the spelling of 'testcase' in parameter name 'testcase' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="treeview" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="201">In method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)', correct the spelling of 'treeview' in parameter name 'treeviewNode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="aeToolBar" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="240">Correct the spelling of the unrecognized token 'aeToolBar' in the literal '": aeToolBar not Found"'.</Issue>
            </Message>
            <Message Id="aeTreeView" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="302">Correct the spelling of the unrecognized token 'aeTreeView' in the literal '"aeTreeView node name is: --&gt;  "'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="293">Correct the spelling of the unrecognized token 'aeTreeView' in the literal '"aeTreeView not found name"'.</Issue>
            </Message>
            <Message Id="fild" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="263">Correct the spelling of the unrecognized token 'fild' in the literal '" , try to fild C2Old "'.</Issue>
            </Message>
            <Message Id="param" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="209">Correct the spelling of the unrecognized token 'param' in the literal '" --&gt; shell main form : root param is null"'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="224">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="261">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="268">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="221">In externally visible method 'AUICommon.FindTreeViewNodeLevel1(String, AutomationElement, String, String, ByRef String)', validate parameter 'root' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindTreeViewNodeLevelAll(System.String,System.Windows.Automation.AutomationElement,System.String,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="332">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " start FindTreeViewNodeLevelAll root.Current.Name : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="342">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " start to find : , - ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="427">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: ":failed find ,  at time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="377">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindTreeViewNodeLevelAll: aeToolBar not Found".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="419">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindTreeViewNodeLevelAll: find ,  exception:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="368">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindTreeViewNodeLevelAll: find aeToolBar exception:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="446">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "aeTreeView not found".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="412">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "category NOT FOUND : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="455">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "found aeNodeLink node name is: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="361">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "stackStrip1 ToolBar  NOT FOUND : ".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="370">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(String, String, MessageBoxButtons)'. Retrieve the following string(s) from a resource table instead: "Exception".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="420">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(String, String, MessageBoxButtons)'. Retrieve the following string(s) from a resource table instead: "Exception".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="420">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(String, String, MessageBoxButtons)'. Retrieve the following string(s) from a resource table instead: "FindTreeViewNodeLevelAll: find ,  exception:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="370">Method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(String, String, MessageBoxButtons)'. Retrieve the following string(s) from a resource table instead: "FindTreeViewNodeLevelAll: find aeToolBar exception:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="364">Modify 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="415">Modify 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="4#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="331">Consider a design that does not require that 'message' be a reference parameter.</Issue>
            </Message>
            <Message Id="testcase" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="331">In method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)', correct the spelling of 'testcase' in parameter name 'testcase' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="treeview" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="331">In method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)', correct the spelling of 'treeview' in parameter name 'treeviewNode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="FindTreeViewNodeLevelAll" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="332">Correct the spelling of the unrecognized token 'FindTreeViewNodeLevelAll' in the literal '" start FindTreeViewNodeLevelAll root.Current.Name : "'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="377">Correct the spelling of the unrecognized token 'FindTreeViewNodeLevelAll' in the literal '"FindTreeViewNodeLevelAll: aeToolBar not Found"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="419">Correct the spelling of the unrecognized token 'FindTreeViewNodeLevelAll' in the literal '"FindTreeViewNodeLevelAll: find "'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="420">Correct the spelling of the unrecognized token 'FindTreeViewNodeLevelAll' in the literal '"FindTreeViewNodeLevelAll: find "'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="368">Correct the spelling of the unrecognized token 'FindTreeViewNodeLevelAll' in the literal '"FindTreeViewNodeLevelAll: find aeToolBar exception:"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="370">Correct the spelling of the unrecognized token 'FindTreeViewNodeLevelAll' in the literal '"FindTreeViewNodeLevelAll: find aeToolBar exception:"'.</Issue>
            </Message>
            <Message Id="aeNodeLink" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="455">Correct the spelling of the unrecognized token 'aeNodeLink' in the literal '"found aeNodeLink node name is: "'.</Issue>
            </Message>
            <Message Id="aeToolBar" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="377">Correct the spelling of the unrecognized token 'aeToolBar' in the literal '"FindTreeViewNodeLevelAll: aeToolBar not Found"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="368">Correct the spelling of the unrecognized token 'aeToolBar' in the literal '"FindTreeViewNodeLevelAll: find aeToolBar exception:"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="370">Correct the spelling of the unrecognized token 'aeToolBar' in the literal '"FindTreeViewNodeLevelAll: find aeToolBar exception:"'.</Issue>
            </Message>
            <Message Id="aeTreeView" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="446">Correct the spelling of the unrecognized token 'aeTreeView' in the literal '"aeTreeView not found"'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="426">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="370">Change 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="420">Change 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="332">In externally visible method 'AUICommon.FindTreeViewNodeLevelAll(String, AutomationElement, String, String, ByRef String)', validate parameter 'root' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataGridViewCellElementAt(System.Int32,System.String,System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="141">Method 'AUICommon.GetDataGridViewCellElementAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Find element failed:element".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="144">Method 'AUICommon.GetDataGridViewCellElementAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Grid Cell element found at time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="131">Method 'AUICommon.GetDataGridViewCellElementAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "try to Find DataGridView Cell:element:".</Issue>
            </Message>
            <Message Id="dgv" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="125">In method 'AUICommon.GetDataGridViewCellElementAt(Integer, String, AutomationElement)', correct the spelling of 'dgv' in parameter name 'dgvElement' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="128">Method 'AUICommon.GetDataGridViewCellElementAt(Integer, String, AutomationElement)' passes 'Grid Null' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message Id="DataGridView" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="131">Correct the spelling of the unrecognized token 'DataGridView' in the literal '"try to Find DataGridView Cell:element:"'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="144">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUICommon.GetDataGridViewCellElementAt(Integer, String, AutomationElement)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="134">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'AUICommon.GetDataGridViewCellElementAt(Integer, String, AutomationElement)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataGridViewCellPointAt(System.Int32,System.String,System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="113">Method 'AUICommon.GetDataGridViewCellPointAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Find element failed:element".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="116">Method 'AUICommon.GetDataGridViewCellPointAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Grid Cell element found at time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="103">Method 'AUICommon.GetDataGridViewCellPointAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "try to Find DataGridView Cell::".</Issue>
            </Message>
            <Message Id="dgv" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="97">In method 'AUICommon.GetDataGridViewCellPointAt(Integer, String, AutomationElement)', correct the spelling of 'dgv' in parameter name 'dgvElement' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="100">Method 'AUICommon.GetDataGridViewCellPointAt(Integer, String, AutomationElement)' passes 'Grid Null' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message Id="DataGridView" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="103">Correct the spelling of the unrecognized token 'DataGridView' in the literal '"try to Find DataGridView Cell::"'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="116">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUICommon.GetDataGridViewCellPointAt(Integer, String, AutomationElement)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataGridViewCellValueAt(System.Int32,System.String,System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="169">Method 'AUICommon.GetDataGridViewCellValueAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Button element found at time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="166">Method 'AUICommon.GetDataGridViewCellValueAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Find element failed:element".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="180">Method 'AUICommon.GetDataGridViewCellValueAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Get element.Current Value:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="156">Method 'AUICommon.GetDataGridViewCellValueAt(Integer, String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "try to Find DataGridView Cell:value:".</Issue>
            </Message>
            <Message Id="dgv" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="150">In method 'AUICommon.GetDataGridViewCellValueAt(Integer, String, AutomationElement)', correct the spelling of 'dgv' in parameter name 'dgvElement' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="153">Method 'AUICommon.GetDataGridViewCellValueAt(Integer, String, AutomationElement)' passes 'Grid Null' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message Id="DataGridView" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="156">Correct the spelling of the unrecognized token 'DataGridView' in the literal '"try to Find DataGridView Cell:value:"'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="169">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUICommon.GetDataGridViewCellValueAt(Integer, String, AutomationElement)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkEnabledElements(System.Windows.Automation.AutomationElement,System.Windows.Forms.TreeNode,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="487">Method 'AUICommon.WalkEnabledElements(AutomationElement, TreeNode, String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "aeTreeView node name is: ".</Issue>
            </Message>
            <Message Id="aeTreeView" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="487">Correct the spelling of the unrecognized token 'aeTreeView' in the literal '"aeTreeView node name is: "'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="493">In externally visible method 'AUICommon.WalkEnabledElements(AutomationElement, TreeNode, String)', validate parameter 'treeNode' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkTreeViewFirstLevelNode(System.Windows.Automation.AutomationElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="503">Method 'AUICommon.WalkTreeViewFirstLevelNode(AutomationElement, String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "WalkTreeViewFirstLevelNode: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="511">Method 'AUICommon.WalkTreeViewFirstLevelNode(AutomationElement, String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "level1 node name is: ".</Issue>
            </Message>
            <Message Id="WalkTreeViewFirstLevelNode" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="503">Correct the spelling of the unrecognized token 'WalkTreeViewFirstLevelNode' in the literal '"WalkTreeViewFirstLevelNode: "'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUICommon.cs" Line="503">In externally visible method 'AUICommon.WalkTreeViewFirstLevelNode(AutomationElement, String)', validate parameter 'rootElement' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AUIUtilities" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="AUI" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'AUI' in type name 'AUIUtilities' by changing it to 'Aui'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'AUIUtilities' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#FindByMultipleConditions(System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="87">Call the 'ArgumentException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindCheckBoxAndToggleState(System.String,System.Windows.Automation.AutomationElement,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="443">Method 'AUIUtilities.FindCheckBoxAndToggleState(String, AutomationElement, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindCheckBoxAndToggleState: ".</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="442">Consider a design that does not require that 'msg' be a reference parameter.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="442">In method 'AUIUtilities.FindCheckBoxAndToggleState(String, AutomationElement, ByRef String)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="FindCheckBoxAndToggleState" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="443">Correct the spelling of the unrecognized token 'FindCheckBoxAndToggleState' in the literal '"FindCheckBoxAndToggleState: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindDocumentAndSendText(System.String,System.Windows.Automation.AutomationElement,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="255">Method 'AUIUtilities.FindDocumentAndSendText(String, AutomationElement, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindTextBoxAndChangeValue: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="274">Method 'AUIUtilities.FindDocumentAndSendText(String, AutomationElement, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "filled text is : ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="288">Modify 'AUIUtilities.FindDocumentAndSendText(String, AutomationElement, String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="254">Consider a design that does not require that 'msg' be a reference parameter.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="254">In method 'AUIUtilities.FindDocumentAndSendText(String, AutomationElement, String, ByRef String)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="FindTextBoxAndChangeValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="255">Correct the spelling of the unrecognized token 'FindTextBoxAndChangeValue' in the literal '"FindTextBoxAndChangeValue: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindElementAndClick(System.String,System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="186">Method 'AUIUtilities.FindElementAndClick(String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindElementAndClick: ".</Issue>
            </Message>
            <Message Id="FindElementAndClick" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="186">Correct the spelling of the unrecognized token 'FindElementAndClick' in the literal '"FindElementAndClick: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindElementAndClickPoint(System.String,System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="204">Method 'AUIUtilities.FindElementAndClickPoint(String, AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindElementAndClick: ".</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="203">In member 'AUIUtilities.FindElementAndClickPoint(String, AutomationElement)', correct the casing of 'ID' in parameter name 'automationID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="FindElementAndClick" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="204">Correct the spelling of the unrecognized token 'FindElementAndClick' in the literal '"FindElementAndClick: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindElementAndToggle(System.String,System.Windows.Automation.AutomationElement,System.Windows.Automation.ToggleState)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="153">Method 'AUIUtilities.FindElementAndToggle(String, AutomationElement, ToggleState)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " Element found".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="177">Method 'AUIUtilities.FindElementAndToggle(String, AutomationElement, ToggleState)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindElementAndToggle not found:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="157">Method 'AUIUtilities.FindElementAndToggle(String, AutomationElement, ToggleState)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindElementAndToggle to: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="148">Method 'AUIUtilities.FindElementAndToggle(String, AutomationElement, ToggleState)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindElementAndToggle: ".</Issue>
            </Message>
            <Message Id="FindElementAndToggle" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="177">Correct the spelling of the unrecognized token 'FindElementAndToggle' in the literal '"FindElementAndToggle not found:"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="157">Correct the spelling of the unrecognized token 'FindElementAndToggle' in the literal '"FindElementAndToggle to: "'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="148">Correct the spelling of the unrecognized token 'FindElementAndToggle' in the literal '"FindElementAndToggle: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindElementByClassName(System.Windows.Automation.AutomationElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="133">Replace the call to 'String.Operator =(String, String)' in 'AUIUtilities.FindElementByClassName(AutomationElement, String)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindElementByID(System.String,System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="19">Correct the casing of 'ID' in member name 'AUIUtilities.FindElementByID(String, AutomationElement)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="20">Replace the call to 'String.Operator =(String, String)' in 'AUIUtilities.FindElementByID(String, AutomationElement)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindElementByName(System.String,System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="42">Replace the call to 'String.Operator =(String, String)' in 'AUIUtilities.FindElementByName(String, AutomationElement)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindListItemByIndex(System.Windows.Automation.AutomationElement,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="112">Call the 'ArgumentException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindTextBoxAndChangeValue(System.String,System.Windows.Automation.AutomationElement,System.String&amp;,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="221">Consider a design that does not require that 'getValue' be an out parameter.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="223">Method 'AUIUtilities.FindTextBoxAndChangeValue(String, AutomationElement, ByRef String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindTextBoxAndChangeValue: ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="244">Modify 'AUIUtilities.FindTextBoxAndChangeValue(String, AutomationElement, ByRef String, String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="4#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="221">Consider a design that does not require that 'msg' be a reference parameter.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="221">In member 'AUIUtilities.FindTextBoxAndChangeValue(String, AutomationElement, ByRef String, String, ByRef String)', correct the casing of 'ID' in parameter name 'automationID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="221">In method 'AUIUtilities.FindTextBoxAndChangeValue(String, AutomationElement, ByRef String, String, ByRef String)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="FindTextBoxAndChangeValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="223">Correct the spelling of the unrecognized token 'FindTextBoxAndChangeValue' in the literal '"FindTextBoxAndChangeValue: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindTextBoxAndValue(System.String,System.Windows.Automation.AutomationElement,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="461">Method 'AUIUtilities.FindTextBoxAndValue(String, AutomationElement, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "FindTextBoxAndValue: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="474">Method 'AUIUtilities.FindTextBoxAndValue(String, AutomationElement, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "TextValue: ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="481">Modify 'AUIUtilities.FindTextBoxAndValue(String, AutomationElement, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="460">Consider a design that does not require that 'msg' be a reference parameter.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="460">In member 'AUIUtilities.FindTextBoxAndValue(String, AutomationElement, ByRef String)', correct the casing of 'ID' in parameter name 'automationID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="460">In method 'AUIUtilities.FindTextBoxAndValue(String, AutomationElement, ByRef String)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="FindTextBoxAndValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="461">Correct the spelling of the unrecognized token 'FindTextBoxAndValue' in the literal '"FindTextBoxAndValue: "'.</Issue>
            </Message>
            <Message Id="TextValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="474">Correct the spelling of the unrecognized token 'TextValue' in the literal '"TextValue: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindTreeViewNodeByName(System.String,System.Windows.Automation.AutomationElement,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="364">Method 'AUIUtilities.FindTreeViewNodeByName(String, AutomationElement, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " final: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="351">Method 'AUIUtilities.FindTreeViewNodeByName(String, AutomationElement, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " first child name: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="357">Method 'AUIUtilities.FindTreeViewNodeByName(String, AutomationElement, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " it is equal: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="345">Method 'AUIUtilities.FindTreeViewNodeByName(String, AutomationElement, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " start to find : ".</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="344">Consider a design that does not require that 'message' be a reference parameter.</Issue>
            </Message>
            <Message Id="testcase" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="344">In method 'AUIUtilities.FindTreeViewNodeByName(String, AutomationElement, String, ByRef String)', correct the spelling of 'testcase' in parameter name 'testcase' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="treeview" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="344">In method 'AUIUtilities.FindTreeViewNodeByName(String, AutomationElement, String, ByRef String)', correct the spelling of 'treeview' in parameter name 'treeviewNode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="344">In method 'AUIUtilities.FindTreeViewNodeByName(String, AutomationElement, String, ByRef String)', correct the spelling of 'treeview' in parameter name 'treeviewRoot' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="message" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="344">Parameter 'message' of 'AUIUtilities.FindTreeViewNodeByName(String, AutomationElement, String, ByRef String)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="355">Because the behavior of 'String.EndsWith(String)' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.FindTreeViewNodeByName(String, AutomationElement, String, ByRef String)' with a call to 'String.EndsWith(String, StringComparison)'. If the result of 'String.EndsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetElementByNameProperty(System.Windows.Automation.AutomationElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="661">In externally visible method 'AUIUtilities.GetElementByNameProperty(AutomationElement, String)', validate parameter 'parentElement' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetElementCenterPoint(System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="310">Method 'AUIUtilities.GetElementCenterPoint(AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "AE ( Width:, , Height:, , LeftTop(, ,, ) ): aeName=,  &lt;id&gt;:".</Issue>
            </Message>
            <Message Id="ae" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="296">In method 'AUIUtilities.GetElementCenterPoint(AutomationElement)', correct the spelling of 'ae' in parameter name 'ae' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="LeftTop" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="310">Correct the spelling of the unrecognized token 'LeftTop' in the literal '", LeftTop("'.</Issue>
            </Message>
            <Message Id="aeName" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="310">Correct the spelling of the unrecognized token 'aeName' in the literal '") ): aeName="'.</Issue>
            </Message>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="310">Because the behavior of 'Double.ToString()' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.GetElementCenterPoint(AutomationElement)' with a call to 'Double.ToString(IFormatProvider)'. If the result of 'Double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="310">Because the behavior of 'Double.ToString()' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.GetElementCenterPoint(AutomationElement)' with a call to 'Double.ToString(IFormatProvider)'. If the result of 'Double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="310">Because the behavior of 'Double.ToString()' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.GetElementCenterPoint(AutomationElement)' with a call to 'Double.ToString(IFormatProvider)'. If the result of 'Double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="310">Because the behavior of 'Double.ToString()' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.GetElementCenterPoint(AutomationElement)' with a call to 'Double.ToString(IFormatProvider)'. If the result of 'Double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="299">In externally visible method 'AUIUtilities.GetElementCenterPoint(AutomationElement)', validate parameter 'ae' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveUIElement(System.Windows.Automation.AutomationElement,System.Double,System.Double)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="566">Method 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Client window cannot be moved., ----".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="562">Method 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Client window no longer available.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="530">Method 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Object not responding in a timely manner.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="533">Method 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Window ready for user interaction".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="557">Method 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Wndow is not moveable.".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="568">Modify 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Ui" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="514">In member 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)', correct the casing of 'Ui' in parameter name 'UiElement' by changing it to 'ui'.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="514">In method 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="514">In method 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
            <Message Id="Wndow" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="557">Correct the spelling of the unrecognized token 'Wndow' in the literal '"Wndow is not moveable."'.</Issue>
            </Message>
            <Message Id="targetLocation" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="518">'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)' declares a variable, 'targetLocation', of type 'Point', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="518">In externally visible method 'AUIUtilities.MoveUIElement(AutomationElement, Double, Double)', validate parameter 'UiElement' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValueInTextBox(System.Windows.Automation.AutomationElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="633">Method 'AUIUtilities.SetValueInTextBox(AutomationElement, String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Error".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="624">Method 'AUIUtilities.SetValueInTextBox(AutomationElement, String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Setting value in textbox".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="631">Modify 'AUIUtilities.SetValueInTextBox(AutomationElement, String)' to catch a more specific exception than 'Object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="619">In externally visible method 'AUIUtilities.SetValueInTextBox(AutomationElement, String)', validate parameter 'rootElement' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TreeViewNodeExpandCollapseState(System.Windows.Automation.AutomationElement,System.Windows.Automation.ExpandCollapseState)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="493">Method 'AUIUtilities.TreeViewNodeExpandCollapseState(AutomationElement, ExpandCollapseState)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Current node state is: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="490">Method 'AUIUtilities.TreeViewNodeExpandCollapseState(AutomationElement, ExpandCollapseState)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "TreeViewNodeExpandCollapseState: ".</Issue>
            </Message>
            <Message Id="TreeViewNodeExpandCollapseState" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="490">Correct the spelling of the unrecognized token 'TreeViewNodeExpandCollapseState' in the literal '"TreeViewNodeExpandCollapseState: "'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="490">In externally visible method 'AUIUtilities.TreeViewNodeExpandCollapseState(AutomationElement, ExpandCollapseState)', validate parameter 'node' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WaitUntilElementByIDFound(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationElement&amp;,System.String,System.DateTime,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="339">Method 'AUIUtilities.WaitUntilElementByIDFound(AutomationElement, ByRef AutomationElement, String, Date, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " found time is (sec) :".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="328">Method 'AUIUtilities.WaitUntilElementByIDFound(AutomationElement, ByRef AutomationElement, String, Date, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Try to Find ,  at : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="336">Method 'AUIUtilities.WaitUntilElementByIDFound(AutomationElement, ByRef AutomationElement, String, Date, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "after ,  seconds,  is not found time is (sec) :".</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="323">Consider a design that does not require that 'element' be a reference parameter.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="323">Correct the casing of 'ID' in member name 'AUIUtilities.WaitUntilElementByIDFound(AutomationElement, ByRef AutomationElement, String, Date, Integer)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="328">Because the behavior of 'Date.ToString()' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WaitUntilElementByIDFound(AutomationElement, ByRef AutomationElement, String, Date, Integer)' with a call to 'Date.ToString(IFormatProvider)'. If the result of 'Date.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="339">Because the behavior of 'Double.ToString()' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WaitUntilElementByIDFound(AutomationElement, ByRef AutomationElement, String, Date, Integer)' with a call to 'Double.ToString(IFormatProvider)'. If the result of 'Double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="336">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WaitUntilElementByIDFound(AutomationElement, ByRef AutomationElement, String, Date, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="336">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WaitUntilElementByIDFound(AutomationElement, ByRef AutomationElement, String, Date, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WaitUntilInstallationComplete(System.Windows.Automation.AutomationElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="651">Method 'AUIUtilities.WaitUntilInstallationComplete(AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " Waiting for close button".</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="651">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WaitUntilInstallationComplete(AutomationElement)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="652">In externally visible method 'AUIUtilities.WaitUntilInstallationComplete(AutomationElement)', validate parameter 'appElement' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WindowPanelFinder(System.Windows.Automation.AutomationElement,System.String,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="389">Method 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " ToolBar found at time1: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="430">Method 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " found at time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="372">Method 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " start find time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="385">Method 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: ": aeToolBar not Found".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="408">Method 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: ":, : found at time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="404">Method 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: ":failed find ,  at time: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="426">Method 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: ":failed to find ,  at time3: ".</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="370">Consider a design that does not require that 'message' be a reference parameter.</Issue>
            </Message>
            <Message Id="aeToolBar" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="385">Correct the spelling of the unrecognized token 'aeToolBar' in the literal '": aeToolBar not Found"'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="372">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="389">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="403">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="408">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="425">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="430">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="AUIUtilities.cs" Line="379">In externally visible method 'AUIUtilities.WindowPanelFinder(AutomationElement, String, String, ByRef String)', validate parameter 'root' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConstCommon" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'ConstCommon' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DEFAULT_WINDOW_NAAM" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DEFAULT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'DEFAULT' in member name 'ConstCommon.DEFAULT_WINDOW_NAAM' by changing it to 'Default'.</Issue>
            </Message>
            <Message Id="NAAM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'NAAM' in member name 'ConstCommon.DEFAULT_WINDOW_NAAM' by changing it to 'Naam'.</Issue>
            </Message>
            <Message Id="WINDOW" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'WINDOW' in member name 'ConstCommon.DEFAULT_WINDOW_NAAM' by changing it to 'Window'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.DEFAULT_WINDOW_NAAM'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DEPLOY_TESTS_DIRECTORY" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ConstCommon.DEPLOY_TESTS_DIRECTORY' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DRIVE_MAP_LETTER" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DRIVE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'DRIVE' in member name 'ConstCommon.DRIVE_MAP_LETTER' by changing it to 'Drive'.</Issue>
            </Message>
            <Message Id="LETTER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'LETTER' in member name 'ConstCommon.DRIVE_MAP_LETTER' by changing it to 'Letter'.</Issue>
            </Message>
            <Message Id="MAP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MAP' in member name 'ConstCommon.DRIVE_MAP_LETTER' by changing it to 'Map'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.DRIVE_MAP_LETTER'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_EPIA_SERVER" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_EPIA_SERVER' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="EPIA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EPIA' in member name 'ConstCommon.EGEMIN_EPIA_SERVER' by changing it to 'Epia'.</Issue>
            </Message>
            <Message Id="SERVER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SERVER' in member name 'ConstCommon.EGEMIN_EPIA_SERVER' by changing it to 'Server'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_EPIA_SERVER'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_EPIA_SERVER_EXE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_EPIA_SERVER_EXE' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="EPIA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EPIA' in member name 'ConstCommon.EGEMIN_EPIA_SERVER_EXE' by changing it to 'Epia'.</Issue>
            </Message>
            <Message Id="EXE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXE' in member name 'ConstCommon.EGEMIN_EPIA_SERVER_EXE' by changing it to 'Exe'.</Issue>
            </Message>
            <Message Id="SERVER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SERVER' in member name 'ConstCommon.EGEMIN_EPIA_SERVER_EXE' by changing it to 'Server'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_EPIA_SERVER_EXE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_EPIA_SHELL" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_EPIA_SHELL' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="EPIA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EPIA' in member name 'ConstCommon.EGEMIN_EPIA_SHELL' by changing it to 'Epia'.</Issue>
            </Message>
            <Message Id="SHELL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SHELL' in member name 'ConstCommon.EGEMIN_EPIA_SHELL' by changing it to 'Shell'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_EPIA_SHELL'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_EPIA_SHELL_EXE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_EPIA_SHELL_EXE' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="EPIA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EPIA' in member name 'ConstCommon.EGEMIN_EPIA_SHELL_EXE' by changing it to 'Epia'.</Issue>
            </Message>
            <Message Id="EXE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXE' in member name 'ConstCommon.EGEMIN_EPIA_SHELL_EXE' by changing it to 'Exe'.</Issue>
            </Message>
            <Message Id="SHELL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SHELL' in member name 'ConstCommon.EGEMIN_EPIA_SHELL_EXE' by changing it to 'Shell'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_EPIA_SHELL_EXE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_ETRICC_EXPLORER_EXE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_ETRICC_EXPLORER_EXE' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.EGEMIN_ETRICC_EXPLORER_EXE' by changing it to 'Etricc'.</Issue>
            </Message>
            <Message Id="EXE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXE' in member name 'ConstCommon.EGEMIN_ETRICC_EXPLORER_EXE' by changing it to 'Exe'.</Issue>
            </Message>
            <Message Id="EXPLORER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXPLORER' in member name 'ConstCommon.EGEMIN_ETRICC_EXPLORER_EXE' by changing it to 'Explorer'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_ETRICC_EXPLORER_EXE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_ETRICC_SERVER" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_ETRICC_SERVER' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.EGEMIN_ETRICC_SERVER' by changing it to 'Etricc'.</Issue>
            </Message>
            <Message Id="SERVER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SERVER' in member name 'ConstCommon.EGEMIN_ETRICC_SERVER' by changing it to 'Server'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_ETRICC_SERVER'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_ETRICC_SERVER_EXE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_ETRICC_SERVER_EXE' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.EGEMIN_ETRICC_SERVER_EXE' by changing it to 'Etricc'.</Issue>
            </Message>
            <Message Id="EXE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXE' in member name 'ConstCommon.EGEMIN_ETRICC_SERVER_EXE' by changing it to 'Exe'.</Issue>
            </Message>
            <Message Id="SERVER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SERVER' in member name 'ConstCommon.EGEMIN_ETRICC_SERVER_EXE' by changing it to 'Server'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_ETRICC_SERVER_EXE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_ETRICC_STATISTICS_PARSER" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSER' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSER' by changing it to 'Etricc'.</Issue>
            </Message>
            <Message Id="PARSER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PARSER' in member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSER' by changing it to 'Parser'.</Issue>
            </Message>
            <Message Id="STATISTICS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'STATISTICS' in member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSER' by changing it to 'Statistics'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSER'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_ETRICC_STATISTICS_PARSERCONFIGURATOR" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSERCONFIGURATOR' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSERCONFIGURATOR' by changing it to 'Etricc'.</Issue>
            </Message>
            <Message Id="PARSERCONFIGURATOR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PARSERCONFIGURATOR' in member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSERCONFIGURATOR' by changing it to 'Parserconfigurator'.</Issue>
            </Message>
            <Message Id="STATISTICS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'STATISTICS' in member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSERCONFIGURATOR' by changing it to 'Statistics'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_ETRICC_STATISTICS_PARSERCONFIGURATOR'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_EWCS_SERVER" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_EWCS_SERVER' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="EWCS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EWCS' in member name 'ConstCommon.EGEMIN_EWCS_SERVER' by changing it to 'Ewcs'.</Issue>
            </Message>
            <Message Id="SERVER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SERVER' in member name 'ConstCommon.EGEMIN_EWCS_SERVER' by changing it to 'Server'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_EWCS_SERVER'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_EWCS_SERVER_EXE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_EWCS_SERVER_EXE' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="EWCS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EWCS' in member name 'ConstCommon.EGEMIN_EWCS_SERVER_EXE' by changing it to 'Ewcs'.</Issue>
            </Message>
            <Message Id="EXE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXE' in member name 'ConstCommon.EGEMIN_EWCS_SERVER_EXE' by changing it to 'Exe'.</Issue>
            </Message>
            <Message Id="SERVER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SERVER' in member name 'ConstCommon.EGEMIN_EWCS_SERVER_EXE' by changing it to 'Server'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_EWCS_SERVER_EXE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EGEMIN_EWCS_TOOLS_DATABASE_FILLER" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DATABASE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'DATABASE' in member name 'ConstCommon.EGEMIN_EWCS_TOOLS_DATABASE_FILLER' by changing it to 'Database'.</Issue>
            </Message>
            <Message Id="EGEMIN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EGEMIN' in member name 'ConstCommon.EGEMIN_EWCS_TOOLS_DATABASE_FILLER' by changing it to 'Egemin'.</Issue>
            </Message>
            <Message Id="EWCS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EWCS' in member name 'ConstCommon.EGEMIN_EWCS_TOOLS_DATABASE_FILLER' by changing it to 'Ewcs'.</Issue>
            </Message>
            <Message Id="FILLER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'FILLER' in member name 'ConstCommon.EGEMIN_EWCS_TOOLS_DATABASE_FILLER' by changing it to 'Filler'.</Issue>
            </Message>
            <Message Id="TOOLS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TOOLS' in member name 'ConstCommon.EGEMIN_EWCS_TOOLS_DATABASE_FILLER' by changing it to 'Tools'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EGEMIN_EWCS_TOOLS_DATABASE_FILLER'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EPIA" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EPIA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EPIA' in member name 'ConstCommon.EPIA' by changing it to 'Epia'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EPIA_3" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EPIA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EPIA' in member name 'ConstCommon.EPIA_3' by changing it to 'Epia'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EPIA_3'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EPIA_4" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EPIA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EPIA' in member name 'ConstCommon.EPIA_4' by changing it to 'Epia'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EPIA_4'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EPIA_CLIENT_ROOT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ConstCommon.EPIA_CLIENT_ROOT' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EPIA_SERVER_ROOT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ConstCommon.EPIA_SERVER_ROOT' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ETRICC" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.ETRICC' by changing it to 'Etricc'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ETRICC_5" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.ETRICC_5' by changing it to 'Etricc'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.ETRICC_5'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ETRICC_ETRICC5" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.ETRICC_ETRICC5' by changing it to 'Etricc'.</Issue>
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.ETRICC_ETRICC5' by changing it to 'Etricc'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.ETRICC_ETRICC5'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ETRICC_TESTS_DIRECTORY" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DIRECTORY" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'DIRECTORY' in member name 'ConstCommon.ETRICC_TESTS_DIRECTORY' by changing it to 'Directory'.</Issue>
            </Message>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.ETRICC_TESTS_DIRECTORY' by changing it to 'Etricc'.</Issue>
            </Message>
            <Message Id="TESTS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TESTS' in member name 'ConstCommon.ETRICC_TESTS_DIRECTORY' by changing it to 'Tests'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.ETRICC_TESTS_DIRECTORY'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ETRICC_UI" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ETRICC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICC' in member name 'ConstCommon.ETRICC_UI' by changing it to 'Etricc'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.ETRICC_UI'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ETRICCSTATISTICS" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ETRICCSTATISTICS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICCSTATISTICS' in member name 'ConstCommon.ETRICCSTATISTICS' by changing it to 'Etriccstatistics'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ETRICCUI" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ETRICCUI" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ETRICCUI' in member name 'ConstCommon.ETRICCUI' by changing it to 'Etriccui'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EUROBALTIC_PROJECT_NAME" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EUROBALTIC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EUROBALTIC' in member name 'ConstCommon.EUROBALTIC_PROJECT_NAME' by changing it to 'Eurobaltic'.</Issue>
            </Message>
            <Message Id="NAME" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'NAME' in member name 'ConstCommon.EUROBALTIC_PROJECT_NAME' by changing it to 'Name'.</Issue>
            </Message>
            <Message Id="PROJECT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PROJECT' in member name 'ConstCommon.EUROBALTIC_PROJECT_NAME' by changing it to 'Project'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EUROBALTIC_PROJECT_NAME'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EUROBALTIC_PROJECT_XML" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EUROBALTIC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EUROBALTIC' in member name 'ConstCommon.EUROBALTIC_PROJECT_XML' by changing it to 'Eurobaltic'.</Issue>
            </Message>
            <Message Id="PROJECT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PROJECT' in member name 'ConstCommon.EUROBALTIC_PROJECT_XML' by changing it to 'Project'.</Issue>
            </Message>
            <Message Id="XML" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'XML' in member name 'ConstCommon.EUROBALTIC_PROJECT_XML' by changing it to 'Xml'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EUROBALTIC_PROJECT_XML'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EUROBALTIC_PROJECT_ZIP" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EUROBALTIC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EUROBALTIC' in member name 'ConstCommon.EUROBALTIC_PROJECT_ZIP' by changing it to 'Eurobaltic'.</Issue>
            </Message>
            <Message Id="PROJECT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PROJECT' in member name 'ConstCommon.EUROBALTIC_PROJECT_ZIP' by changing it to 'Project'.</Issue>
            </Message>
            <Message Id="ZIP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ZIP' in member name 'ConstCommon.EUROBALTIC_PROJECT_ZIP' by changing it to 'Zip'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EUROBALTIC_PROJECT_ZIP'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EWCS_PROJECTS" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EWCS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EWCS' in member name 'ConstCommon.EWCS_PROJECTS' by changing it to 'Ewcs'.</Issue>
            </Message>
            <Message Id="PROJECTS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PROJECTS' in member name 'ConstCommon.EWCS_PROJECTS' by changing it to 'Projects'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EWCS_PROJECTS'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXCEL_BLACK" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BLACK" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'BLACK' in member name 'ConstCommon.EXCEL_BLACK' by changing it to 'Black'.</Issue>
            </Message>
            <Message Id="EXCEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEL' in member name 'ConstCommon.EXCEL_BLACK' by changing it to 'Excel'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EXCEL_BLACK'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXCEL_BLUE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BLUE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'BLUE' in member name 'ConstCommon.EXCEL_BLUE' by changing it to 'Blue'.</Issue>
            </Message>
            <Message Id="EXCEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEL' in member name 'ConstCommon.EXCEL_BLUE' by changing it to 'Excel'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EXCEL_BLUE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXCEL_BRUNE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BRUNE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'BRUNE' in member name 'ConstCommon.EXCEL_BRUNE' by changing it to 'Brune'.</Issue>
            </Message>
            <Message Id="EXCEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEL' in member name 'ConstCommon.EXCEL_BRUNE' by changing it to 'Excel'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EXCEL_BRUNE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXCEL_GREEN" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EXCEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEL' in member name 'ConstCommon.EXCEL_GREEN' by changing it to 'Excel'.</Issue>
            </Message>
            <Message Id="GREEN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'GREEN' in member name 'ConstCommon.EXCEL_GREEN' by changing it to 'Green'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EXCEL_GREEN'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXCEL_LIGHTBLUE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EXCEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEL' in member name 'ConstCommon.EXCEL_LIGHTBLUE' by changing it to 'Excel'.</Issue>
            </Message>
            <Message Id="LIGHTBLUE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'LIGHTBLUE' in member name 'ConstCommon.EXCEL_LIGHTBLUE' by changing it to 'Lightblue'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EXCEL_LIGHTBLUE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXCEL_PINK" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EXCEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEL' in member name 'ConstCommon.EXCEL_PINK' by changing it to 'Excel'.</Issue>
            </Message>
            <Message Id="PINK" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PINK' in member name 'ConstCommon.EXCEL_PINK' by changing it to 'Pink'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EXCEL_PINK'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXCEL_RED" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EXCEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEL' in member name 'ConstCommon.EXCEL_RED' by changing it to 'Excel'.</Issue>
            </Message>
            <Message Id="RED" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'RED' in member name 'ConstCommon.EXCEL_RED' by changing it to 'Red'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EXCEL_RED'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXCEL_WHITE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EXCEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEL' in member name 'ConstCommon.EXCEL_WHITE' by changing it to 'Excel'.</Issue>
            </Message>
            <Message Id="WHITE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'WHITE' in member name 'ConstCommon.EXCEL_WHITE' by changing it to 'White'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EXCEL_WHITE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXCEL_YELLOW" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EXCEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEL' in member name 'ConstCommon.EXCEL_YELLOW' by changing it to 'Excel'.</Issue>
            </Message>
            <Message Id="YELLOW" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'YELLOW' in member name 'ConstCommon.EXCEL_YELLOW' by changing it to 'Yellow'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.EXCEL_YELLOW'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KIMBERLY_CLARK" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CLARK" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CLARK' in member name 'ConstCommon.KIMBERLY_CLARK' by changing it to 'Clark'.</Issue>
            </Message>
            <Message Id="KIMBERLY" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'KIMBERLY' in member name 'ConstCommon.KIMBERLY_CLARK' by changing it to 'Kimberly'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.KIMBERLY_CLARK'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KIMBERLY_CLARK_SERVER_ROOT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ConstCommon.KIMBERLY_CLARK_SERVER_ROOT' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MY_LAYOUT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LAYOUT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'LAYOUT' in member name 'ConstCommon.MY_LAYOUT' by changing it to 'Layout'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.MY_LAYOUT'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MY_PLACE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PLACE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PLACE' in member name 'ConstCommon.MY_PLACE' by changing it to 'Place'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.MY_PLACE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MY_SETTINGS" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SETTINGS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SETTINGS' in member name 'ConstCommon.MY_SETTINGS' by changing it to 'Settings'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.MY_SETTINGS'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PARSERCONFIGURATOR_EXE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EXE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXE' in member name 'ConstCommon.PARSERCONFIGURATOR_EXE' by changing it to 'Exe'.</Issue>
            </Message>
            <Message Id="PARSERCONFIGURATOR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PARSERCONFIGURATOR' in member name 'ConstCommon.PARSERCONFIGURATOR_EXE' by changing it to 'Parserconfigurator'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.PARSERCONFIGURATOR_EXE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PARSERCONFIGURATOR_ROOT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PARSERCONFIGURATOR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PARSERCONFIGURATOR' in member name 'ConstCommon.PARSERCONFIGURATOR_ROOT' by changing it to 'Parserconfigurator'.</Issue>
            </Message>
            <Message Id="ROOT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ROOT' in member name 'ConstCommon.PARSERCONFIGURATOR_ROOT' by changing it to 'Root'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.PARSERCONFIGURATOR_ROOT'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SMTP_SERVERID" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SERVERID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SERVERID' in member name 'ConstCommon.SMTP_SERVERID' by changing it to 'Serverid'.</Issue>
            </Message>
            <Message Id="SMTP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SMTP' in member name 'ConstCommon.SMTP_SERVERID' by changing it to 'Smtp'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.SMTP_SERVERID'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TEST_EXCEPTION" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EXCEPTION" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EXCEPTION' in member name 'ConstCommon.TEST_EXCEPTION' by changing it to 'Exception'.</Issue>
            </Message>
            <Message Id="TEST" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TEST' in member name 'ConstCommon.TEST_EXCEPTION' by changing it to 'Test'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.TEST_EXCEPTION'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TEST_FAIL" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FAIL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'FAIL' in member name 'ConstCommon.TEST_FAIL' by changing it to 'Fail'.</Issue>
            </Message>
            <Message Id="TEST" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TEST' in member name 'ConstCommon.TEST_FAIL' by changing it to 'Test'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.TEST_FAIL'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TEST_PASS" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PASS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PASS' in member name 'ConstCommon.TEST_PASS' by changing it to 'Pass'.</Issue>
            </Message>
            <Message Id="TEST" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TEST' in member name 'ConstCommon.TEST_PASS' by changing it to 'Test'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.TEST_PASS'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TEST_UNDEFINED" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TEST" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TEST' in member name 'ConstCommon.TEST_UNDEFINED' by changing it to 'Test'.</Issue>
            </Message>
            <Message Id="UNDEFINED" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'UNDEFINED' in member name 'ConstCommon.TEST_UNDEFINED' by changing it to 'Undefined'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.TEST_UNDEFINED'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TESTINFO_FILENAME" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FILENAME" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'FILENAME' in member name 'ConstCommon.TESTINFO_FILENAME' should be expressed as a compound word, 'FileName'.</Issue>
            </Message>
            <Message Id="FILENAME" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'FILENAME' in member name 'ConstCommon.TESTINFO_FILENAME' by changing it to 'Filename'.</Issue>
            </Message>
            <Message Id="TESTINFO" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TESTINFO' in member name 'ConstCommon.TESTINFO_FILENAME' by changing it to 'Testinfo'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.TESTINFO_FILENAME'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TESTWORKING_FILENAME" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FILENAME" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'FILENAME' in member name 'ConstCommon.TESTWORKING_FILENAME' should be expressed as a compound word, 'FileName'.</Issue>
            </Message>
            <Message Id="FILENAME" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'FILENAME' in member name 'ConstCommon.TESTWORKING_FILENAME' by changing it to 'Filename'.</Issue>
            </Message>
            <Message Id="TESTWORKING" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TESTWORKING' in member name 'ConstCommon.TESTWORKING_FILENAME' by changing it to 'Testworking'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ConstCommon.TESTWORKING_FILENAME'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Epia3Common" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Epia" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Epia' in type name 'Epia3Common'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Epia3Common' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CloseTestLog(System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="245">Modify 'Epia3Common.CloseTestLog(String, Boolean)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="237">Because the behavior of 'String.Format(String, Object, Object)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.CloseTestLog(String, Boolean)' with a call to 'String.Format(IFormatProvider, String, ParamArray Object())'. If the result of 'String.Format(IFormatProvider, String, ParamArray Object())' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateTestLog(System.String&amp;,System.String,System.String,System.IO.StreamWriter&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="96">In member 'Epia3Common.CreateTestLog(ByRef String, String, String, ByRef StreamWriter)', the discrete term 'Filename' in parameter name 'outFilename' should be expressed as a compound word, 'FileName'.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="112">Method 'Epia3Common.CreateTestLog(ByRef String, String, String, ByRef StreamWriter)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "===, ------  not exist".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="116">Method 'Epia3Common.CreateTestLog(ByRef String, String, String, ByRef StreamWriter)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "===, ------ exist".</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="96">Consider a design that does not require that 'slogFilePath' be a reference parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="96">Consider a design that does not require that 'Writer' be a reference parameter.</Issue>
            </Message>
            <Message Id="Writer" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="96">In member 'Epia3Common.CreateTestLog(ByRef String, String, String, ByRef StreamWriter)', correct the casing of 'Writer' in parameter name 'Writer' by changing it to 'writer'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="98">Because the behavior of 'String.ToUpper()' could vary based on the current user's locale settings, replace this call in 'Epia3Common.CreateTestLog(ByRef String, String, String, ByRef StreamWriter)' with a call to 'String.ToUpper(CultureInfo)'. If the result of 'String.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="121">Because the behavior of 'Date.ToString()' could vary based on the current user's locale settings, replace this call in 'Epia3Common.CreateTestLog(ByRef String, String, String, ByRef StreamWriter)' with a call to 'Date.ToString(IFormatProvider)'. If the result of 'Date.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="122">Because the behavior of 'Date.ToString()' could vary based on the current user's locale settings, replace this call in 'Epia3Common.CreateTestLog(ByRef String, String, String, ByRef StreamWriter)' with a call to 'Date.ToString(IFormatProvider)'. If the result of 'Date.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="100">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.CreateTestLog(ByRef String, String, String, ByRef StreamWriter)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="98">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.CreateTestLog(ByRef String, String, String, ByRef StreamWriter)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllParameters(System.String,System.String&amp;,System.String&amp;,System.String&amp;,System.String&amp;,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="21">Consider a design that does not require that 'buildBaseDir' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="21">Consider a design that does not require that 'buildNr' be a reference parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="21">Consider a design that does not require that 'testApp' be a reference parameter.</Issue>
            </Message>
            <Message Id="4#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="21">Consider a design that does not require that 'buildDef' be a reference parameter.</Issue>
            </Message>
            <Message Id="5#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="21">Consider a design that does not require that 'buildConfig' be a reference parameter.</Issue>
            </Message>
            <Message Id="Nr" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="21">In member 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the casing of 'Nr' in parameter name 'buildNr' by changing it to 'NR'.</Issue>
            </Message>
            <Message Id="Def" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="21">In method 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'Def' in parameter name 'buildDef' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="21">In method 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'Dir' in parameter name 'buildBaseDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="21">In method 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'Dir' in parameter name 'installScriptsDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="32">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="33">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="36">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="25">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="27">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="29">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="32">In externally visible method 'Epia3Common.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', validate local variable ''(*buildNr)'', which was reassigned from parameter 'buildNr', before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getBuildBasePath(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="51">Correct the casing of 'get' in member name 'Epia3Common.getBuildBasePath(String)' by changing it to 'Get'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="57">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildBasePath(String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="57">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildBasePath(String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="52">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildBasePath(String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="63">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildBasePath(String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="57">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildBasePath(String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="57">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildBasePath(String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="57">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildBasePath(String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="52">In externally visible method 'Epia3Common.getBuildBasePath(String)', validate parameter 'path' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getBuildnr(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="77">Correct the casing of 'get' in member name 'Epia3Common.getBuildnr(String)' by changing it to 'Get'.</Issue>
            </Message>
            <Message Id="Buildnr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="77">Correct the spelling of 'Buildnr' in member name 'Epia3Common.getBuildnr(String)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="83">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildnr(String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="83">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildnr(String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="79">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildnr(String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="88">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildnr(String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="83">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildnr(String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="83">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildnr(String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="83">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.getBuildnr(String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="79">In externally visible method 'Epia3Common.getBuildnr(String)', validate parameter 'path' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteTestLogFail(System.String,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="221">Modify 'Epia3Common.WriteTestLogFail(String, String, Boolean)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="testcase" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="203">In method 'Epia3Common.WriteTestLogFail(String, String, Boolean)', correct the spelling of 'testcase' in parameter name 'testcase' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="213">Because the behavior of 'String.Format(String, Object, Object)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.WriteTestLogFail(String, String, Boolean)' with a call to 'String.Format(IFormatProvider, String, ParamArray Object())'. If the result of 'String.Format(IFormatProvider, String, ParamArray Object())' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteTestLogMsg(System.String,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="173">Modify 'Epia3Common.WriteTestLogMsg(String, String, Boolean)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="155">Correct the spelling of 'Msg' in member name 'Epia3Common.WriteTestLogMsg(String, String, Boolean)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="155">In method 'Epia3Common.WriteTestLogMsg(String, String, Boolean)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="165">Because the behavior of 'String.Format(String, Object, Object)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.WriteTestLogMsg(String, String, Boolean)' with a call to 'String.Format(IFormatProvider, String, ParamArray Object())'. If the result of 'String.Format(IFormatProvider, String, ParamArray Object())' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteTestLogPass(System.String,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="197">Modify 'Epia3Common.WriteTestLogPass(String, String, Boolean)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="testcase" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="179">In method 'Epia3Common.WriteTestLogPass(String, String, Boolean)', correct the spelling of 'testcase' in parameter name 'testcase' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="189">Because the behavior of 'String.Format(String, Object, Object)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.WriteTestLogPass(String, String, Boolean)' with a call to 'String.Format(IFormatProvider, String, ParamArray Object())'. If the result of 'String.Format(IFormatProvider, String, ParamArray Object())' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteTestLogTitle(System.String,System.String,System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="149">Modify 'Epia3Common.WriteTestLogTitle(String, String, Integer, Boolean)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="139">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'Epia3Common.WriteTestLogTitle(String, String, Integer, Boolean)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Epia3Common.cs" Line="139">Because the behavior of 'String.Format(String, Object, Object)' could vary based on the current user's locale settings, replace this call in 'Epia3Common.WriteTestLogTitle(String, String, Integer, Boolean)' with a call to 'String.Format(IFormatProvider, String, ParamArray Object())'. If the result of 'String.Format(IFormatProvider, String, ParamArray Object())' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileManipulation" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'FileManipulation' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CheckSearchTextExistInFile(System.String,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="166">In method 'FileManipulation.CheckSearchTextExistInFile(String, String, ByRef String)', call System.IDisposable.Dispose on object 'reader2' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="185">Modify 'FileManipulation.CheckSearchTextExistInFile(String, String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="156">Consider a design that does not require that 'msg' be a reference parameter.</Issue>
            </Message>
            <Message Id="checkfile" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="156">In method 'FileManipulation.CheckSearchTextExistInFile(String, String, ByRef String)', correct the spelling of 'checkfile' in parameter name 'checkfile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="156">In method 'FileManipulation.CheckSearchTextExistInFile(String, String, ByRef String)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="170">Because the behavior of 'String.IndexOf(String, Integer)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.CheckSearchTextExistInFile(String, String, ByRef String)' with a call to 'String.IndexOf(String, Integer, StringComparison)'. If the result of 'String.IndexOf(String, Integer, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckSearchTextExistInFile(System.String,System.String,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="207">In method 'FileManipulation.CheckSearchTextExistInFile(String, String, String, ByRef String)', call System.IDisposable.Dispose on object 'reader2' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="226">Modify 'FileManipulation.CheckSearchTextExistInFile(String, String, String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="196">Consider a design that does not require that 'msg' be a reference parameter.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="196">In method 'FileManipulation.CheckSearchTextExistInFile(String, String, String, ByRef String)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="211">Because the behavior of 'String.IndexOf(String, Integer)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.CheckSearchTextExistInFile(String, String, String, ByRef String)' with a call to 'String.IndexOf(String, Integer, StringComparison)'. If the result of 'String.IndexOf(String, Integer, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyDirectory(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dst" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="253">In member 'FileManipulation.CopyDirectory(String, String)', correct the casing of 'Dst' in parameter name 'Dst' by changing it to 'dst'.</Issue>
            </Message>
            <Message Id="Src" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="253">In member 'FileManipulation.CopyDirectory(String, String)', correct the casing of 'Src' in parameter name 'Src' by changing it to 'src'.</Issue>
            </Message>
            <Message Id="Dst" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="253">In method 'FileManipulation.CopyDirectory(String, String)', correct the spelling of 'Dst' in parameter name 'Dst' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Src" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="253">In method 'FileManipulation.CopyDirectory(String, String)', correct the spelling of 'Src' in parameter name 'Src' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="256">In externally visible method 'FileManipulation.CopyDirectory(String, String)', validate parameter 'Dst' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyFilesWithWildcards(System.String,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="100">Modify 'FileManipulation.CopyFilesWithWildcards(String, String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="71">Consider a design that does not require that 'errorMsg' be a reference parameter.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="71">In method 'FileManipulation.CopyFilesWithWildcards(String, String, ByRef String)', correct the spelling of 'Msg' in parameter name 'errorMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="dest" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="71">In method 'FileManipulation.CopyFilesWithWildcards(String, String, ByRef String)', correct the spelling of 'dest' in parameter name 'destFullPath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="orig" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="71">In method 'FileManipulation.CopyFilesWithWildcards(String, String, ByRef String)', correct the spelling of 'orig' in parameter name 'origFullPath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="76">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.CopyFilesWithWildcards(String, String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="80">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.CopyFilesWithWildcards(String, String, ByRef String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="76">In externally visible method 'FileManipulation.CopyFilesWithWildcards(String, String, ByRef String)', validate parameter 'origFullPath' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateOutputInfoFileName(System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="15">In method 'FileManipulation.CreateOutputInfoFileName(String, Boolean)', correct the spelling of 's' in parameter name 'sInfoFileKey' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="17">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.CreateOutputInfoFileName(String, Boolean)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteFilesWithWildcards(System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="142">Modify 'FileManipulation.DeleteFilesWithWildcards(String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="114">Consider a design that does not require that 'errorMsg' be a reference parameter.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="114">In method 'FileManipulation.DeleteFilesWithWildcards(String, ByRef String)', correct the spelling of 'Msg' in parameter name 'errorMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="119">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.DeleteFilesWithWildcards(String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="123">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.DeleteFilesWithWildcards(String, ByRef String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="119">In externally visible method 'FileManipulation.DeleteFilesWithWildcards(String, ByRef String)', validate parameter 'fullPath' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteRecursiveFolder(System.IO.DirectoryInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="55">In method 'FileManipulation.DeleteRecursiveFolder(DirectoryInfo)', correct the spelling of 'dir' in parameter name 'dirInfo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="56">In externally visible method 'FileManipulation.DeleteRecursiveFolder(DirectoryInfo)', validate parameter 'dirInfo' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveExcel(Microsoft.Office.Interop.Excel.Application,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="546">Consider changing the type of parameter 'xApp' in 'FileManipulation.SaveExcel(Application, String, ByRef String)' from 'Application' to its base type '_Application'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="549">Method 'FileManipulation.SaveExcel(Application, String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Save Excel File : ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="559">Modify 'FileManipulation.SaveExcel(Application, String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="546">Consider a design that does not require that 'errorMsg' be a reference parameter.</Issue>
            </Message>
            <Message Id="XLS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="546">In member 'FileManipulation.SaveExcel(Application, String, ByRef String)', correct the casing of 'XLS' in parameter name 'sXLSPath' by changing it to 'Xls'.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="546">In method 'FileManipulation.SaveExcel(Application, String, ByRef String)', correct the spelling of 'Msg' in parameter name 'errorMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="546">In method 'FileManipulation.SaveExcel(Application, String, ByRef String)', correct the spelling of 's' in parameter name 'sXLSPath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="546">In method 'FileManipulation.SaveExcel(Application, String, ByRef String)', correct the spelling of 'x' in parameter name 'xApp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="550">In externally visible method 'FileManipulation.SaveExcel(Application, String, ByRef String)', validate parameter 'xApp' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShareFolderPermission(System.String,System.String,System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="32">In method 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)', call System.IDisposable.Dispose on object 'managementClass' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="45">Method 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(String)'. Retrieve the following string(s) from a resource table instead: "Folder might be already in share or unable to share the directory".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="50">Method 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: "create share folder:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="50">Method 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: "Create ShareFolderPermission:,  --- ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="47">Modify 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="28">Consider a design that does not require that 'errorMsg' be a reference parameter.</Issue>
            </Message>
            <Message Id="Description" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="28">In member 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)', correct the casing of 'Description' in parameter name 'Description' by changing it to 'description'.</Issue>
            </Message>
            <Message Id="Folder" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="28">In member 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)', correct the casing of 'Folder' in parameter name 'FolderPath' by changing it to 'folder'.</Issue>
            </Message>
            <Message Id="Share" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="28">In member 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)', correct the casing of 'Share' in parameter name 'ShareName' by changing it to 'share'.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="28">In method 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)', correct the spelling of 'Msg' in parameter name 'errorMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="ShareFolderPermission" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="50">Correct the spelling of the unrecognized token 'ShareFolderPermission' in the literal '"Create ShareFolderPermission:"'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="45">Change 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="50">Change 'FileManipulation.ShareFolderPermission(String, String, String, ByRef String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateTestWorkingFile(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="247">In method 'FileManipulation.UpdateTestWorkingFile(String, String)', object 'writeWorking' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'writeWorking' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteExcelFoot(Microsoft.Office.Interop.Excel.Application,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="430">'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="430">Consider changing the type of parameter 'xApp' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' from 'Application' to its base type '_Application'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Counter" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="430">In member 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)', correct the casing of 'Counter' in parameter name 'Counter' by changing it to 'counter'.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="430">In method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)', correct the spelling of 's' in parameter name 'sTotalCounter' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="430">In method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)', correct the spelling of 's' in parameter name 'sTotalFailed' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="430">In method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)', correct the spelling of 's' in parameter name 'sTotalPassed' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="430">In method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)', correct the spelling of 'x' in parameter name 'xApp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Counter+10" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="477">Correct the potential overflow in the operation 'Counter+10' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+11" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="478">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+12" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="479">Correct the potential overflow in the operation 'Counter+12' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+13" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="480">Correct the potential overflow in the operation 'Counter+13' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+2" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="432">Correct the potential overflow in the operation 'Counter+2' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="436">Correct the potential overflow in the operation 'Counter+2' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+3" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="433">Correct the potential overflow in the operation 'Counter+3' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="437">Correct the potential overflow in the operation 'Counter+3' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+4" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="434">Correct the potential overflow in the operation 'Counter+4' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="438">Correct the potential overflow in the operation 'Counter+4' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+5" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="447">Correct the potential overflow in the operation 'Counter+5' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="448">Correct the potential overflow in the operation 'Counter+5' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+6" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="453">Correct the potential overflow in the operation 'Counter+6' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="454">Correct the potential overflow in the operation 'Counter+6' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+7" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="459">Correct the potential overflow in the operation 'Counter+7' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="460">Correct the potential overflow in the operation 'Counter+7' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="465">Correct the potential overflow in the operation 'Counter+8' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="466">Correct the potential overflow in the operation 'Counter+8' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="Counter+9" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="471">Correct the potential overflow in the operation 'Counter+9' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="472">Correct the potential overflow in the operation 'Counter+9' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="448">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="454">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="460">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="466">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="472">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.UInt64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="477">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="478">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="479">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="480">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="431">In externally visible method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer)', validate parameter 'xApp' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteExcelFoot(Microsoft.Office.Interop.Excel.Application,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="488">'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="488">Consider changing the type of parameter 'xApp' in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' from 'Application' to its base type '_Application'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Counter" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="488">In member 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)', correct the casing of 'Counter' in parameter name 'Counter' by changing it to 'counter'.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="488">In method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)', correct the spelling of 's' in parameter name 'sTotalCounter' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="488">In method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)', correct the spelling of 's' in parameter name 'sTotalFailed' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="488">In method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)', correct the spelling of 's' in parameter name 'sTotalPassed' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="488">In method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)', correct the spelling of 'x' in parameter name 'xApp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Counter" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="488">Parameter 'Counter' of 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="507">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="513">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="519">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="525">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="531">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.UInt64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="536">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="537">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="538">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="539">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="490">In externally visible method 'FileManipulation.WriteExcelFoot(Application, Integer, Integer, Integer, Integer, Integer)', validate parameter 'xApp' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteExcelHeader(Microsoft.Office.Interop.Excel.Application&amp;,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)' has a cyclomatic complexity of 44. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">Consider a design that does not require that 'xApp' be a reference parameter.</Issue>
            </Message>
            <Message Id="App" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In member 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the casing of 'App' in parameter name 'AppName' by changing it to 'app'.</Issue>
            </Message>
            <Message Id="OS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In member 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the casing of 'OS' in parameter name 'OSName' by changing it to 'os'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In member 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the casing of 'OS' in parameter name 'OSVersion' by changing it to 'os'.</Issue>
            </Message>
            <Message Id="PC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In member 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the casing of 'PC' in parameter name 'PCName' by changing it to 'pc'.</Issue>
            </Message>
            <Message Id="Time" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In member 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the casing of 'Time' in parameter name 'TimeOnPC' by changing it to 'time'.</Issue>
            </Message>
            <Message Id="UI" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In member 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the casing of 'UI' in parameter name 'UICulture' by changing it to 'ui'.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the spelling of 'Dir' in parameter name 'sInstallMsiDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Msi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the spelling of 'Msi' in parameter name 'sInstallMsiDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the spelling of 's' in parameter name 'sExcelVisible' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the spelling of 's' in parameter name 'sInstallMsiDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the spelling of 's' in parameter name 'sTestToolsVersion' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="308">In method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', correct the spelling of 'x' in parameter name 'xApp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="xBook" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="311">'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)' declares a variable, 'xBook', of type 'Workbook', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="325">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="318">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="314">Replace the call to 'String.Operator =(String, String)' in 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="324">In externally visible method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', validate local variable ''(*xApp)'', which was reassigned from parameter 'xApp', before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="318">In externally visible method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String, String, String, String, String, String, String, String, String)', validate parameter 'sExcelVisible' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteExcelHeader(Microsoft.Office.Interop.Excel.Application&amp;,System.String,System.String[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="276">Consider a design that does not require that 'xApp' be a reference parameter.</Issue>
            </Message>
            <Message Id="Header" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="276">In member 'FileManipulation.WriteExcelHeader(ByRef Application, String, String())', correct the casing of 'Header' in parameter name 'HeaderLines' by changing it to 'header'.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="276">In method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String())', correct the spelling of 's' in parameter name 'sExcelVisible' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="276">In method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String())', correct the spelling of 'x' in parameter name 'xApp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="xBook" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="279">'FileManipulation.WriteExcelHeader(ByRef Application, String, String())' declares a variable, 'xBook', of type 'Workbook', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="286">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelHeader(ByRef Application, String, String())' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="282">Replace the call to 'String.Operator =(String, String)' in 'FileManipulation.WriteExcelHeader(ByRef Application, String, String())' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="292">In externally visible method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String())', validate local variable ''(*xApp)'', which was reassigned from parameter 'xApp', before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="286">In externally visible method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String())', validate parameter 'sExcelVisible' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="293">In externally visible method 'FileManipulation.WriteExcelHeader(ByRef Application, String, String())', validate parameter 'HeaderLines' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteExcelTestCaseResult(Microsoft.Office.Interop.Excel.Application,System.Int32,System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="393">Consider changing the type of parameter 'xApp' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)' from 'Application' to its base type '_Application'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Counter" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="393">In member 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)', correct the casing of 'Counter' in parameter name 'Counter' by changing it to 'counter'.</Issue>
            </Message>
            <Message Id="MSG" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="393">In member 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)', correct the casing of 'MSG' in parameter name 'errorMSG' by changing it to 'Msg'.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="393">In method 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)', correct the spelling of 'x' in parameter name 'xApp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="headerRowCount+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="394">Correct the potential overflow in the operation 'headerRowCount+1' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="396">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="401">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="401">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="404">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="404">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="407">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="407">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="395">In externally visible method 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, Integer, String, String)', validate parameter 'xApp' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteExcelTestCaseResult(Microsoft.Office.Interop.Excel.Application,System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="354">Consider changing the type of parameter 'xApp' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)' from 'Application' to its base type '_Application'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Counter" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="354">In member 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)', correct the casing of 'Counter' in parameter name 'Counter' by changing it to 'counter'.</Issue>
            </Message>
            <Message Id="MSG" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="354">In member 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)', correct the casing of 'MSG' in parameter name 'errorMSG' by changing it to 'Msg'.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="354">In method 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)', correct the spelling of 'x' in parameter name 'xApp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Counter+11" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="357">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="358">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="359">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="362">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="362">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="366">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="366">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="369">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="369">Correct the potential overflow in the operation 'Counter+11' in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="356">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="362">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="362">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="366">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="366">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="369">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="369">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="FileManipulation.cs" Line="355">In externally visible method 'FileManipulation.WriteExcelTestCaseResult(Application, Integer, Integer, String, String)', validate parameter 'xApp' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HelpUtilities" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'HelpUtilities' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetBuildAndTestInfo()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="28">In method 'HelpUtilities.GetBuildAndTestInfo()', object 'reader' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'reader' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="24">Change 'HelpUtilities.GetBuildAndTestInfo()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDriveInfo()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="82">Modify 'HelpUtilities.GetDriveInfo()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="58">Because the behavior of 'Long.ToString()' could vary based on the current user's locale settings, replace this call in 'HelpUtilities.GetDriveInfo()' with a call to 'Long.ToString(IFormatProvider)'. If the result of 'Long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="76">Because the behavior of 'Long.ToString()' could vary based on the current user's locale settings, replace this call in 'HelpUtilities.GetDriveInfo()' with a call to 'Long.ToString(IFormatProvider)'. If the result of 'Long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMemoryInfo()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.UInt64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="102">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'HelpUtilities.GetMemoryInfo()' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="103">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'HelpUtilities.GetMemoryInfo()' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="104">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'HelpUtilities.GetMemoryInfo()' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="105">Because the behavior of 'ULong.ToString()' could vary based on the current user's locale settings, replace this call in 'HelpUtilities.GetMemoryInfo()' with a call to 'ULong.ToString(IFormatProvider)'. If the result of 'ULong.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMemoryInfo(System.UInt64&amp;,System.UInt64&amp;,System.UInt64&amp;,System.UInt64&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">Consider a design that does not require that 'TPhysicalMem' be an out parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">Consider a design that does not require that 'APhysicalMem' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">Consider a design that does not require that 'TVirtualMem' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">Consider a design that does not require that 'AVirtualMem' be an out parameter.</Issue>
            </Message>
            <Message Id="A" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In member 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the casing of 'A' in parameter name 'APhysicalMem' by changing it to 'a'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In member 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the casing of 'A' in parameter name 'AVirtualMem' by changing it to 'a'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In member 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the casing of 'T' in parameter name 'TPhysicalMem' by changing it to 't'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In member 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the casing of 'T' in parameter name 'TVirtualMem' by changing it to 't'.</Issue>
            </Message>
            <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In method 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the spelling of 'A' in parameter name 'APhysicalMem' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In method 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the spelling of 'A' in parameter name 'AVirtualMem' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Mem" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In method 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the spelling of 'Mem' in parameter name 'APhysicalMem' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In method 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the spelling of 'Mem' in parameter name 'AVirtualMem' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In method 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the spelling of 'Mem' in parameter name 'TPhysicalMem' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In method 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the spelling of 'Mem' in parameter name 'TVirtualMem' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In method 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the spelling of 'T' in parameter name 'TPhysicalMem' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="112">In method 'HelpUtilities.GetMemoryInfo(ByRef ULong, ByRef ULong, ByRef ULong, ByRef ULong)', correct the spelling of 'T' in parameter name 'TVirtualMem' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPCInfo()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.DateTime.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="152">Because the behavior of 'Date.ToString()' could vary based on the current user's locale settings, replace this call in 'HelpUtilities.GetPCInfo()' with a call to 'Date.ToString(IFormatProvider)'. If the result of 'Date.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPCInfo(System.String&amp;,System.String&amp;,System.String&amp;,System.String&amp;,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="126">Consider a design that does not require that 'name' be an out parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="126">Consider a design that does not require that 'os' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="126">Consider a design that does not require that 'osversion' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="126">Consider a design that does not require that 'uiculture' be an out parameter.</Issue>
            </Message>
            <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="126">Consider a design that does not require that 'timeonpc' be an out parameter.</Issue>
            </Message>
            <Message Id="os" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="126">In method 'HelpUtilities.GetPCInfo(ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'os' in parameter name 'os' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="osversion" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="126">In method 'HelpUtilities.GetPCInfo(ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'osversion' in parameter name 'osversion' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="timeonpc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="126">In method 'HelpUtilities.GetPCInfo(ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'timeonpc' in parameter name 'timeonpc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="uiculture" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="126">In method 'HelpUtilities.GetPCInfo(ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'uiculture' in parameter name 'uiculture' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="132">Because the behavior of 'Date.ToString()' could vary based on the current user's locale settings, replace this call in 'HelpUtilities.GetPCInfo(ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'Date.ToString(IFormatProvider)'. If the result of 'Date.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPCOS()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PCOS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="158">Correct the casing of 'PCOS' in member name 'HelpUtilities.GetPCOS()' by changing it to 'Pcos'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="158">Change 'HelpUtilities.GetPCOS()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SavePCInfo(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="191">Method 'HelpUtilities.SavePCInfo(String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "PC Information" &amp; ChrW(13) &amp; ChrW(10) &amp; ", " &amp; ChrW(13) &amp; ChrW(10) &amp; ", Drive I...".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="195">Method 'HelpUtilities.SavePCInfo(String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "You must chose to write to file or not.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="196">Method 'HelpUtilities.SavePCInfo(String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "y or n after the program name".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="199">Modify 'HelpUtilities.SavePCInfo(String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="stdout" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="164">In method 'HelpUtilities.SavePCInfo(String)', correct the spelling of 'stdout' in parameter name 'stdout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteReport(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="211">In method 'HelpUtilities.WriteReport(String)', call System.IDisposable.Dispose on object 'objSW' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="HelpUtilities.cs" Line="215">Modify 'HelpUtilities.WriteReport(String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HelpUtilities+PCINFO" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="PCINFO" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'PCINFO' in type name 'HelpUtilities.PCINFO' by changing it to 'Pcinfo'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HelpUtilities.PCINFO'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'HelpUtilities.PCINFO' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'HelpUtilities.PCINFO' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#pcName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HelpUtilities.PCINFO.pcName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#pcOS" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HelpUtilities.PCINFO.pcOS' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#pcOSVersion" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HelpUtilities.PCINFO.pcOSVersion' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#pcUICulture" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HelpUtilities.PCINFO.pcUICulture' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#timeOnPC" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HelpUtilities.PCINFO.timeOnPC' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Input" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ClickAtPoint(System.Windows.Point)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="pt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="199">In method 'Input.ClickAtPoint(Point)', correct the spelling of 'pt' in parameter name 'pt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAsyncKeyState(System.Windows.Input.Key)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GetAsyncKeyStateFailed" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="78">Correct the spelling of the unrecognized token 'GetAsyncKeyStateFailed' in the literal '"GetAsyncKeyStateFailed"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveTo(System.Windows.Point)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="pt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="183">In method 'Input.MoveTo(Point)', correct the spelling of 'pt' in parameter name 'pt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveToAndClick(System.Windows.Point)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="pt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="258">In method 'Input.MoveToAndClick(Point)', correct the spelling of 'pt' in parameter name 'pt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveToAndDoubleClick(System.Windows.Point)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="pt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="280">In method 'Input.MoveToAndDoubleClick(Point)', correct the spelling of 'pt' in parameter name 'pt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveToAndRightClick(System.Windows.Point)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="pt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="305">In method 'Input.MoveToAndRightClick(Point)', correct the spelling of 'pt' in parameter name 'pt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendKeyboardInputVK(System.Byte,System.Boolean)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="369">'Input.SendKeyboardInputVK(Byte, Boolean)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMouseInput(System.Double,System.Double,System.Int32,TestTools.SendMouseInputFlags)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="402">In method 'Input.SendMouseInput(Double, Double, Integer, SendMouseInputFlags)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="402">In method 'Input.SendMouseInput(Double, Double, Integer, SendMouseInputFlags)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="402">In member 'Input.SendMouseInput(Double, Double, Integer, SendMouseInputFlags)', replace the term 'flags' in parameter name 'flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMouseInput(System.Int32,System.Int32,System.Int32,TestTools.SendMouseInputFlags)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="384">In method 'Input.SendMouseInput(Integer, Integer, Integer, SendMouseInputFlags)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="384">In method 'Input.SendMouseInput(Integer, Integer, Integer, SendMouseInputFlags)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Input.cs" Line="384">In member 'Input.SendMouseInput(Integer, Integer, Integer, SendMouseInputFlags)', replace the term 'flags' in parameter name 'flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Logger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="logfilepath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="28">In method 'Logger.New(String)', correct the spelling of 'logfilepath' in parameter name 'logfilepath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLogPath()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="119">The 'this' parameter (or 'Me' in Visual Basic) of 'Logger.GetLogPath()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="119">Change 'Logger.GetLogPath()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTempPath()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="38">The 'this' parameter (or 'Me' in Visual Basic) of 'Logger.GetTempPath()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="40">Because the behavior of 'String.EndsWith(String)' could vary based on the current user's locale settings, replace this call in 'Logger.GetTempPath()' with a call to 'String.EndsWith(String, StringComparison)'. If the result of 'String.EndsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="38">Change 'Logger.GetTempPath()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogMessageToFile(System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="55">Modify 'Logger.LogMessageToFile(String, Integer, Integer)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="45">In method 'Logger.LogMessageToFile(String, Integer, Integer)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="45">The 'this' parameter (or 'Me' in Visual Basic) of 'Logger.LogMessageToFile(String, Integer, Integer)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="48">Because the behavior of 'String.Format(String, Object, Object)' could vary based on the current user's locale settings, replace this call in 'Logger.LogMessageToFile(String, Integer, Integer)' with a call to 'String.Format(IFormatProvider, String, ParamArray Object())'. If the result of 'String.Format(IFormatProvider, String, ParamArray Object())' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogMessageToFile(System.String,System.Int32,System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="107">Object 'sw' can be disposed more than once in method 'Logger.LogMessageToFile(String, Integer, Integer, String)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 107</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="93">Method 'Logger.LogMessageToFile(String, Integer, Integer, String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "write log exception : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="100">Method 'Logger.LogMessageToFile(String, Integer, Integer, String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "write log exception : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="92">Method 'Logger.LogMessageToFile(String, Integer, Integer, String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "write log msg : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="99">Method 'Logger.LogMessageToFile(String, Integer, Integer, String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "write log msg : ".</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="72">In method 'Logger.LogMessageToFile(String, Integer, Integer, String)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="msg" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="92">Correct the spelling of the unrecognized token 'msg' in the literal '"write log msg : "'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="99">Correct the spelling of the unrecognized token 'msg' in the literal '"write log msg : "'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="72">The 'this' parameter (or 'Me' in Visual Basic) of 'Logger.LogMessageToFile(String, Integer, Integer, String)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="exceptionToLocal" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="72">Parameter 'exceptionToLocal' of 'Logger.LogMessageToFile(String, Integer, Integer, String)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="75">Because the behavior of 'String.Format(String, Object, Object)' could vary based on the current user's locale settings, replace this call in 'Logger.LogMessageToFile(String, Integer, Integer, String)' with a call to 'String.Format(IFormatProvider, String, ParamArray Object())'. If the result of 'String.Format(IFormatProvider, String, ParamArray Object())' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="Logger.cs" Line="88">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'Logger.LogMessageToFile(String, Integer, Integer, String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MessageBoxEx" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="TypeNewerVersion" Certainty="95" Level="CriticalError">Either replace the suffix 'Ex' in type name 'MessageBoxEx' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the type it replaces.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'MessageBoxEx' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="34">Initialize all static fields in 'MessageBoxEx' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.CallNextHookEx(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.CallNextHookEx(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.CallNextHookEx(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.CallNextHookEx(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'n' in parameter name 'nCode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.CallNextHookEx(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError">Either replace the suffix 'Ex' in member name 'MessageBoxEx.CallNextHookEx(IntPtr, Integer, IntPtr, IntPtr)' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'MessageBoxEx.CallNextHookEx(IntPtr, Integer, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'MessageBoxEx.CallNextHookEx(IntPtr, Integer, IntPtr, IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DM_GETDEFID" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GETDEFID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'GETDEFID' in member name 'MessageBoxEx.DM_GETDEFID' by changing it to 'Getdefid'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'MessageBoxEx.DM_GETDEFID'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EndDialog(System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dlg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.EndDialog(IntPtr, IntPtr)', correct the spelling of 'Dlg' in parameter name 'hDlg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.EndDialog(IntPtr, IntPtr)', correct the spelling of 'h' in parameter name 'hDlg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.EndDialog(IntPtr, IntPtr)', correct the spelling of 'n' in parameter name 'nResult' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'MessageBoxEx.EndDialog(IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'MessageBoxEx.EndDialog(IntPtr, IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.GetWindowText(IntPtr, StringBuilder, Integer)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.GetWindowText(IntPtr, StringBuilder, Integer)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'MessageBoxEx.GetWindowText(IntPtr, StringBuilder, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'MessageBoxEx.GetWindowText(IntPtr, StringBuilder, Integer)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'text' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowTextLength(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.GetWindowTextLength(IntPtr)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.GetWindowTextLength(IntPtr)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'MessageBoxEx.GetWindowTextLength(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'MessageBoxEx.GetWindowTextLength(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#hHook" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseSafeHandleToEncapsulateNativeResources" Category="Microsoft.Reliability" CheckId="CA2006" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Review usage of 'MessageBoxEx.hHook' (a 'IntPtr' instance) to determine whether it should be replaced with a SafeHandle or CriticalHandle.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MessageBoxHookProc(System.Int32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="TestTools.MessageBoxEx.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="169">'MessageBoxEx.MessageBoxHookProc(Integer, IntPtr, IntPtr)' calls 'MessageBoxEx.GetWindowText(IntPtr, StringBuilder, Integer)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
            <Message Id="TestTools.MessageBoxEx.UnhookWindowsHookEx(System.IntPtr)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="175">'MessageBoxEx.MessageBoxHookProc(Integer, IntPtr, IntPtr)' calls 'MessageBoxEx.UnhookWindowsHookEx(IntPtr)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MessageBoxTimerProc(System.IntPtr,System.UInt32,System.UIntPtr,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="TestTools.MessageBoxEx.EndDialog(System.IntPtr,System.IntPtr)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="189">'MessageBoxEx.MessageBoxTimerProc(IntPtr, UInteger, UIntPtr, UInteger)' calls 'MessageBoxEx.EndDialog(IntPtr, IntPtr)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)', correct the casing of 'Msg' in parameter name 'Msg' by changing it to 'msg'.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'Msg' in parameter name 'Msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'MessageBoxEx.SendMessage(IntPtr, Integer, IntPtr, IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetTimer(System.IntPtr,System.UIntPtr,System.UInt32,TestTools.MessageBoxEx+TimerProc)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'MessageBoxEx.SetTimer(IntPtr, UIntPtr, UInteger, MessageBoxEx.TimerProc)', correct the casing of 'ID' in parameter name 'nIDEvent' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SetTimer(IntPtr, UIntPtr, UInteger, MessageBoxEx.TimerProc)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SetTimer(IntPtr, UIntPtr, UInteger, MessageBoxEx.TimerProc)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="lp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SetTimer(IntPtr, UIntPtr, UInteger, MessageBoxEx.TimerProc)', correct the spelling of 'lp' in parameter name 'lpTimerFunc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SetTimer(IntPtr, UIntPtr, UInteger, MessageBoxEx.TimerProc)', correct the spelling of 'n' in parameter name 'nIDEvent' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SetTimer(IntPtr, UIntPtr, UInteger, MessageBoxEx.TimerProc)', correct the spelling of 'u' in parameter name 'uElapse' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'MessageBoxEx.SetTimer(IntPtr, UIntPtr, UInteger, MessageBoxEx.TimerProc)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'MessageBoxEx.SetTimer(IntPtr, UIntPtr, UInteger, MessageBoxEx.TimerProc)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetWindowsHookEx(System.Int32,TestTools.MessageBoxEx+HookProc,System.IntPtr,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SetWindowsHookEx(Integer, MessageBoxEx.HookProc, IntPtr, Integer)', correct the spelling of 'h' in parameter name 'hInstance' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="lpfn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MessageBoxEx.SetWindowsHookEx(Integer, MessageBoxEx.HookProc, IntPtr, Integer)', correct the spelling of 'lpfn' in parameter name 'lpfn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError">Either replace the suffix 'Ex' in member name 'MessageBoxEx.SetWindowsHookEx(Integer, MessageBoxEx.HookProc, IntPtr, Integer)' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'MessageBoxEx.SetWindowsHookEx(Integer, MessageBoxEx.HookProc, IntPtr, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'MessageBoxEx.SetWindowsHookEx(Integer, MessageBoxEx.HookProc, IntPtr, Integer)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.String,System.String,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="49">In method 'MessageBoxEx.Show(String, String, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="51">Change 'MessageBoxEx.Show(String, String, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="55">In method 'MessageBoxEx.Show(String, String, MessageBoxButtons, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="57">Change 'MessageBoxEx.Show(String, String, MessageBoxButtons, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="62">In method 'MessageBoxEx.Show(String, String, MessageBoxButtons, MessageBoxIcon, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="64">Change 'MessageBoxEx.Show(String, String, MessageBoxButtons, MessageBoxIcon, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="def" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="69">In method 'MessageBoxEx.Show(String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, UInteger)', correct the spelling of 'def' in parameter name 'defButton' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="69">In method 'MessageBoxEx.Show(String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="71">Change 'MessageBoxEx.Show(String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="def" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="76">In method 'MessageBoxEx.Show(String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, MessageBoxOptions, UInteger)', correct the spelling of 'def' in parameter name 'defButton' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="76">In method 'MessageBoxEx.Show(String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, MessageBoxOptions, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.String,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="43">In method 'MessageBoxEx.Show(String, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="45">Change 'MessageBoxEx.Show(String, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="88">In method 'MessageBoxEx.Show(IWin32Window, String, String, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="90">Change 'MessageBoxEx.Show(IWin32Window, String, String, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="95">In method 'MessageBoxEx.Show(IWin32Window, String, String, MessageBoxButtons, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="97">Change 'MessageBoxEx.Show(IWin32Window, String, String, MessageBoxButtons, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="102">In method 'MessageBoxEx.Show(IWin32Window, String, String, MessageBoxButtons, MessageBoxIcon, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="104">Change 'MessageBoxEx.Show(IWin32Window, String, String, MessageBoxButtons, MessageBoxIcon, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="def" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="109">In method 'MessageBoxEx.Show(IWin32Window, String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, UInteger)', correct the spelling of 'def' in parameter name 'defButton' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="109">In method 'MessageBoxEx.Show(IWin32Window, String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="111">Change 'MessageBoxEx.Show(IWin32Window, String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="def" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="117">In method 'MessageBoxEx.Show(IWin32Window, String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, MessageBoxOptions, UInteger)', correct the spelling of 'def' in parameter name 'defButton' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="117">In method 'MessageBoxEx.Show(IWin32Window, String, String, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, MessageBoxOptions, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.Windows.Forms.IWin32Window,System.String,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="82">In method 'MessageBoxEx.Show(IWin32Window, String, UInteger)', correct the spelling of 'u' in parameter name 'uTimeout' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="MessageBoxEx.cs" Line="84">Change 'MessageBoxEx.Show(IWin32Window, String, UInteger)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnhookWindowsHookEx(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError">Either replace the suffix 'Ex' in member name 'MessageBoxEx.UnhookWindowsHookEx(IntPtr)' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'MessageBoxEx.UnhookWindowsHookEx(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'MessageBoxEx.UnhookWindowsHookEx(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WH_CALLWNDPROCRET" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CALLWNDPROCRET" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CALLWNDPROCRET' in member name 'MessageBoxEx.WH_CALLWNDPROCRET' by changing it to 'Callwndprocret'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'MessageBoxEx.WH_CALLWNDPROCRET'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_DESTROY" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DESTROY" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'DESTROY' in member name 'MessageBoxEx.WM_DESTROY' by changing it to 'Destroy'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'MessageBoxEx.WM_DESTROY'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_INITDIALOG" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="INITDIALOG" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'INITDIALOG' in member name 'MessageBoxEx.WM_INITDIALOG' by changing it to 'Initdialog'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'MessageBoxEx.WM_INITDIALOG'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_TIMER" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TIMER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TIMER' in member name 'MessageBoxEx.WM_TIMER' by changing it to 'Timer'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'MessageBoxEx.WM_TIMER'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_USER" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="USER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'USER' in member name 'MessageBoxEx.WM_USER' by changing it to 'User'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'MessageBoxEx.WM_USER'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MessageBoxEx+CWPRETSTRUCT" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="CWPRETSTRUCT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'CWPRETSTRUCT' in type name 'MessageBoxEx.CWPRETSTRUCT' by changing it to 'Cwpretstruct'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'MessageBoxEx.CWPRETSTRUCT'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'MessageBoxEx.CWPRETSTRUCT' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'MessageBoxEx.CWPRETSTRUCT' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#hwnd" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MessageBoxEx.CWPRETSTRUCT.hwnd' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="hwnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'hwnd' in member name 'MessageBoxEx.CWPRETSTRUCT.hwnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'MessageBoxEx.CWPRETSTRUCT.hwnd' private.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lParam" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MessageBoxEx.CWPRETSTRUCT.lParam' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Param' in member name 'MessageBoxEx.CWPRETSTRUCT.lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'MessageBoxEx.CWPRETSTRUCT.lParam' private.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lResult" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MessageBoxEx.CWPRETSTRUCT.lResult' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'MessageBoxEx.CWPRETSTRUCT.lResult' private.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#message" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MessageBoxEx.CWPRETSTRUCT.message' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#wParam" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MessageBoxEx.CWPRETSTRUCT.wParam' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Param' in member name 'MessageBoxEx.CWPRETSTRUCT.wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'MessageBoxEx.CWPRETSTRUCT.wParam' private.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MessageBoxEx+HookProc" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.HookProc', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.HookProc', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Proc' in type name 'MessageBoxEx.HookProc'.</Issue>
          </Message>
          <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.HookProc', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.HookProc', correct the spelling of 'n' in parameter name 'nCode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.HookProc', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'MessageBoxEx.HookProc'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MessageBoxEx+TimerProc" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameterAbbreviation" Certainty="85" Level="Error">In delegate 'MessageBoxEx.TimerProc', correct the casing of 'ID' in parameter name 'nIDEvent' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
          </Message>
          <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.TimerProc', correct the spelling of 'Msg' in parameter name 'uMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Proc' in type name 'MessageBoxEx.TimerProc'.</Issue>
          </Message>
          <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.TimerProc', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message Id="dw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.TimerProc', correct the spelling of 'dw' in parameter name 'dwTime' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.TimerProc', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.TimerProc', correct the spelling of 'n' in parameter name 'nIDEvent' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MessageBoxEx.TimerProc', correct the spelling of 'u' in parameter name 'uMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'MessageBoxEx.TimerProc'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="OSVersionInfoClass" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'OSVersionInfoClass' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ProgramFilesx86()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filesx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="OSVersionInfoClass.cs" Line="11">Correct the spelling of 'Filesx' in member name 'OSVersionInfoClass.ProgramFilesx86()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProgramFilesx86FolderName()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Program Files" TypeName="DoNotHardcodeLocaleSpecificStrings" Category="Microsoft.Globalization" CheckId="CA1302" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="OSVersionInfoClass.cs" Line="23">If the literal 'Program Files' used in method 'OSVersionInfoClass.ProgramFilesx86FolderName()' refers to a special system location, replace it with a call to Environment.GetFolderPath.</Issue>
            </Message>
            <Message Id="Filesx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="OSVersionInfoClass.cs" Line="22">Correct the spelling of 'Filesx' in member name 'OSVersionInfoClass.ProgramFilesx86FolderName()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="OSVersionInfoClass.cs" Line="33">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'OSVersionInfoClass.ProgramFilesx86FolderName()' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OSVersionInfoClass+OSVersionInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'OSVersionInfoClass.OSVersionInfo'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Edition" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Edition()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
               <Issue Certainty="90" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="OSVersionInfoClass.cs" Line="241">'OSVersionInfoClass.OSVersionInfo.Edition.Get()' has a cyclomatic complexity of 91. Rewrite or refactor the method to reduce complexity to 25.</Issue>
              </Message>
              <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
               <Issue Name="Method" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="OSVersionInfoClass.cs" Line="241">'OSVersionInfoClass.OSVersionInfo.Edition.Get()' has a maintainability index of 14. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetNativeSystemInfo(TestTools.OSVersionInfoClass+OSVersionInfo+SYSTEM_INFO&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'lpSystemInfo' be a reference parameter.</Issue>
            </Message>
            <Message Id="lp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'OSVersionInfoClass.OSVersionInfo.GetNativeSystemInfo(ByRef OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO)', correct the spelling of 'lp' in parameter name 'lpSystemInfo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'OSVersionInfoClass.OSVersionInfo.GetNativeSystemInfo(ByRef OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'OSVersionInfoClass.OSVersionInfo.GetNativeSystemInfo(ByRef OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetProcAddress(System.IntPtr,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Proc' in member name 'OSVersionInfoClass.OSVersionInfo.GetProcAddress(IntPtr, String)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="hwnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'OSVersionInfoClass.OSVersionInfo.GetProcAddress(IntPtr, String)', correct the spelling of 'hwnd' in parameter name 'hwnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'OSVersionInfoClass.OSVersionInfo.GetProcAddress(IntPtr, String)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'OSVersionInfoClass.OSVersionInfo.GetProcAddress(IntPtr, String)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'procedureName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetProductInfo(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'OSVersionInfoClass.OSVersionInfo.GetProductInfo(Integer, Integer, Integer, Integer, ByRef Integer)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'OSVersionInfoClass.OSVersionInfo.GetProductInfo(Integer, Integer, Integer, Integer, ByRef Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSystemInfo(TestTools.OSVersionInfoClass+OSVersionInfo+SYSTEM_INFO&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'lpSystemInfo' be a reference parameter.</Issue>
            </Message>
            <Message Id="lp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'OSVersionInfoClass.OSVersionInfo.GetSystemInfo(ByRef OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO)', correct the spelling of 'lp' in parameter name 'lpSystemInfo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'OSVersionInfoClass.OSVersionInfo.GetSystemInfo(ByRef OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'OSVersionInfoClass.OSVersionInfo.GetSystemInfo(ByRef OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSystemMetrics(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'OSVersionInfoClass.OSVersionInfo.GetSystemMetrics(Integer)', correct the spelling of 'n' in parameter name 'nIndex' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'OSVersionInfoClass.OSVersionInfo.GetSystemMetrics(Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'OSVersionInfoClass.OSVersionInfo.GetSystemMetrics(Integer)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVersionEx(TestTools.OSVersionInfoClass+OSVersionInfo+OSVERSIONINFOEX&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'OSVersionInfoClass.OSVersionInfo.GetVersionEx(ByRef OSVersionInfoClass.OSVersionInfo.OSVERSIONINFOEX)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'OSVersionInfoClass.OSVersionInfo.GetVersionEx(ByRef OSVersionInfoClass.OSVersionInfo.OSVERSIONINFOEX)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="UseManagedEquivalentsOfWin32Api" Category="Microsoft.Usage" CheckId="CA2205" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="PlatformInvokeDeclaration" Certainty="50" Level="Error">Remove the declaration for 'OSVersionInfoClass.OSVersionInfo.GetVersionEx(ByRef OSVersionInfoClass.OSVersionInfo.OSVERSIONINFOEX)'. Callers should use the following managed alternative: System.Environment.OSVersion</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadLibrary(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'OSVersionInfoClass.OSVersionInfo.LoadLibrary(String)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'OSVersionInfoClass.OSVersionInfo.LoadLibrary(String)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'libraryName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Name()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
               <Issue Certainty="90" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="OSVersionInfoClass.cs" Line="593">'OSVersionInfoClass.OSVersionInfo.Name.Get()' has a cyclomatic complexity of 32. Rewrite or refactor the method to reduce complexity to 25.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ProcessorBits" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ProcessorBits()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="OSVersionInfoClass.cs" Line="220">Modify 'OSVersionInfoClass.OSVersionInfo.ProcessorBits.Get()' to catch a more specific exception than 'Object' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ProgramBits" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ProgramBits()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="test" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="OSVersionInfoClass.cs" Line="105">'OSVersionInfoClass.OSVersionInfo.ProgramBits.Get()' declares a variable, 'test', of type 'IDictionary', which is never used or is only assigned to. Use this variable or remove it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="OSVersionInfoClass+OSVersionInfo+_PROCESSOR_INFO_UNION" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="INFO" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'INFO' in type name 'OSVersionInfoClass.OSVersionInfo._PROCESSOR_INFO_UNION' by changing it to 'Info'.</Issue>
          </Message>
          <Message Id="PROCESSOR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'PROCESSOR' in type name 'OSVersionInfoClass.OSVersionInfo._PROCESSOR_INFO_UNION' by changing it to 'Processor'.</Issue>
          </Message>
          <Message Id="UNION" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'UNION' in type name 'OSVersionInfoClass.OSVersionInfo._PROCESSOR_INFO_UNION' by changing it to 'Union'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Remove the underscores from type name 'OSVersionInfoClass.OSVersionInfo._PROCESSOR_INFO_UNION'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'OSVersionInfoClass.OSVersionInfo._PROCESSOR_INFO_UNION'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'OSVersionInfoClass.OSVersionInfo._PROCESSOR_INFO_UNION' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'OSVersionInfoClass.OSVersionInfo._PROCESSOR_INFO_UNION' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#dwOemId" Kind="Field" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'OSVersionInfoClass.OSVersionInfo._PROCESSOR_INFO_UNION.dwOemId' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#wReserved" Kind="Field" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'OSVersionInfoClass.OSVersionInfo._PROCESSOR_INFO_UNION.wReserved' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OSVersionInfoClass+OSVersionInfo+SYSTEM_INFO" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="INFO" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'INFO' in type name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO' by changing it to 'Info'.</Issue>
          </Message>
          <Message Id="SYSTEM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'SYSTEM' in type name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO' by changing it to 'System'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Remove the underscores from type name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#dwActiveProcessorMask" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwActiveProcessorMask' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="dw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'dw' in member name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwActiveProcessorMask' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwActiveProcessorMask' private.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#dwAllocationGranularity" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwAllocationGranularity' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="dw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'dw' in member name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwAllocationGranularity' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#dwNumberOfProcessors" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwNumberOfProcessors' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="dw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'dw' in member name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwNumberOfProcessors' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#dwPageSize" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwPageSize' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="dw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'dw' in member name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwPageSize' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#dwProcessorLevel" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwProcessorLevel' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="dw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'dw' in member name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwProcessorLevel' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#dwProcessorRevision" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwProcessorRevision' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="dw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'dw' in member name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwProcessorRevision' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#dwProcessorType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwProcessorType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="dw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'dw' in member name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.dwProcessorType' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lpMaximumApplicationAddress" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.lpMaximumApplicationAddress' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="lp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'lp' in member name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.lpMaximumApplicationAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.lpMaximumApplicationAddress' private.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lpMinimumApplicationAddress" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.lpMinimumApplicationAddress' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="lp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'lp' in member name 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.lpMinimumApplicationAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'OSVersionInfoClass.OSVersionInfo.SYSTEM_INFO.lpMinimumApplicationAddress' private.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProcessUtilities" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'ProcessUtilities' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CloseProcess(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="20">Method 'ProcessUtilities.CloseProcess(String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Close ,  at:".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="25">Method 'ProcessUtilities.CloseProcess(String)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(String, Object)'. Retrieve the following string(s) from a resource table instead: " close ,  exception:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="23">Modify 'ProcessUtilities.CloseProcess(String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="20">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.CloseProcess(String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetApplicationProcessID(System.String,System.Diagnostics.Process&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="56">Consider a design that does not require that 'proc' be an out parameter.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="61">Method 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " procs.Length:,  at ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="75">Method 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Kill Proc at:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="70">Method 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Proc ID:".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="81">Method 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(String, Object)'. Retrieve the following string(s) from a resource table instead: " check proc exception:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="79">Modify 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="56">Correct the casing of 'ID' in member name 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="56">In method 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)', correct the spelling of 'proc' in parameter name 'proc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Proc" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="75">Correct the spelling of the unrecognized token 'Proc' in the literal '"Kill Proc at:"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="70">Correct the spelling of the unrecognized token 'Proc' in the literal '"Proc ID:"'.</Issue>
            </Message>
            <Message Id="proc" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="81">Correct the spelling of the unrecognized token 'proc' in the literal '" check proc exception:"'.</Issue>
            </Message>
            <Message Id="procs" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="61">Correct the spelling of the unrecognized token 'procs' in the literal '" procs.Length:"'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="61">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="75">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="61">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="70">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.GetApplicationProcessID(String, ByRef Process)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RunProcessAndGetOutput(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="198">In method 'ProcessUtilities.RunProcessAndGetOutput(String, String)', call System.IDisposable.Dispose on object 'process' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="217">Modify 'ProcessUtilities.RunProcessAndGetOutput(String, String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="180">In method 'ProcessUtilities.RunProcessAndGetOutput(String, String)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendEmailTo(System.String,System.Net.Mail.MailMessage&amp;,System.Net.Mail.Attachment&amp;,System.String,System.String,System.Int32,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="285">Consider a design that does not require that 'oMsg' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="285">Consider a design that does not require that 'oAttch' be a reference parameter.</Issue>
            </Message>
            <Message Id="Attch" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="285">In method 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)', correct the spelling of 'Attch' in parameter name 'oAttch' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="285">In method 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)', correct the spelling of 'Msg' in parameter name 'oMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="285">In method 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)', correct the spelling of 'o' in parameter name 'oAttch' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="285">In method 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)', correct the spelling of 'o' in parameter name 'oMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="285">In method 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)', correct the spelling of 'x' in parameter name 'xPath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="sendHour" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="286">'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)' declares a variable, 'sendHour', of type 'Integer', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="xPath" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="285">Parameter 'xPath' of 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="292">Because the behavior of 'String.ToLower()' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)' with a call to 'String.ToLower(CultureInfo)'. If the result of 'String.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="295">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="306">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="313">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="292">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="287">In externally visible method 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)', validate local variable ''(*oMsg)'', which was reassigned from parameter 'oMsg', before using it.</Issue>
            </Message>
            <Message Id="8" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="292">In externally visible method 'ProcessUtilities.SendEmailTo(String, ByRef MailMessage, ByRef Attachment, String, String, Integer, String, String, String)', validate parameter 'sendMail' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendTestResultToDevelopers(System.String,System.String,System.String,TestTools.Logger,System.Int32,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="252">In method 'ProcessUtilities.SendTestResultToDevelopers(String, String, String, Logger, Integer, String, String, String)', call System.IDisposable.Dispose on object 'client' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="243">In method 'ProcessUtilities.SendTestResultToDevelopers(String, String, String, Logger, Integer, String, String, String)', call System.IDisposable.Dispose on object 'oAttch' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="242">In method 'ProcessUtilities.SendTestResultToDevelopers(String, String, String, Logger, Integer, String, String, String)', call System.IDisposable.Dispose on object 'oMsg' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="278">Method 'ProcessUtilities.SendTestResultToDevelopers(String, String, String, Logger, Integer, String, String, String)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(String, Object)'. Retrieve the following string(s) from a resource table instead: "{0} Exception caught.".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="259">Modify 'ProcessUtilities.SendTestResultToDevelopers(String, String, String, Logger, Integer, String, String, String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="275">Modify 'ProcessUtilities.SendTestResultToDevelopers(String, String, String, Logger, Integer, String, String, String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="247">In externally visible method 'ProcessUtilities.SendTestResultToDevelopers(String, String, String, Logger, Integer, String, String, String)', validate parameter 'logger' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartProcessAndWaitUntilResponding(System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="90">In member 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)', the discrete term 'Filename' in parameter name 'procFilename' should be expressed as a compound word, 'FileName'.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="94">In method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)', call System.IDisposable.Dispose on object 'proc' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="104">Method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " has id:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="112">Method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " is responding".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="126">Method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " no responding".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="105">Method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Responding:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="120">Method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "after ,  min ,  no responding".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="133">Method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(String, Object)'. Retrieve the following string(s) from a resource table instead: "proc not exist:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="131">Modify 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="90">In method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)', correct the spelling of 'Dir' in parameter name 'processDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="90">In method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)', correct the spelling of 'proc' in parameter name 'procFilename' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="90">In method 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)', correct the spelling of 'proc' in parameter name 'procName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="proc" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="133">Correct the spelling of the unrecognized token 'proc' in the literal '"proc not exist:"'.</Issue>
            </Message>
            <Message Id="waitMinute*60" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="118">Correct the potential overflow in the operation 'waitMinute*60' in 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="112">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="120">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="126">Because the behavior of 'Date.ToString(String)' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' with a call to 'Date.ToString(String, IFormatProvider)'. If the result of 'Date.ToString(String, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="104">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="120">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.StartProcessAndWaitUntilResponding(String, String, String, String, Integer)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartProcessAndWaitUntilUIWindowFound(System.String,System.String,System.String,System.String,System.Int32,System.Windows.Automation.AutomationElement&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="141">In member 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)', the discrete term 'Filename' in parameter name 'procFilename' should be expressed as a compound word, 'FileName'.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="146">Method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "*****".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="167">Method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Found Main window Handle . . . ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="168">Method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Found Main window Title . . . ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="166">Method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Found it!".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="152">Method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "intPtr is zero!".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="156">Method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "intPtr is:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="174">Method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "proc not exist:,   ----  ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="172">Modify 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="5#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="141">Consider a design that does not require that 'testForm' be a reference parameter.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="162">'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="141">In method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)', correct the spelling of 'Dir' in parameter name 'processDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="141">In method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)', correct the spelling of 'proc' in parameter name 'procFilename' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="141">In method 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)', correct the spelling of 'proc' in parameter name 'procName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="intPtr" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="152">Correct the spelling of the unrecognized token 'intPtr' in the literal '"intPtr is zero!"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="156">Correct the spelling of the unrecognized token 'intPtr' in the literal '"intPtr is:"'.</Issue>
            </Message>
            <Message Id="proc" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="174">Correct the spelling of the unrecognized token 'proc' in the literal '"proc not exist:"'.</Issue>
            </Message>
            <Message Id="args" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="141">Parameter 'args' of 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="waitMinute" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="141">Parameter 'waitMinute' of 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="146">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'ProcessUtilities.StartProcessAndWaitUntilUIWindowFound(String, String, String, String, Integer, ByRef AutomationElement)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartProcessNoWait(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="30">In member 'ProcessUtilities.StartProcessNoWait(String, String, String)', the discrete term 'Filename' in parameter name 'procFilename' should be expressed as a compound word, 'FileName'.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="32">In method 'ProcessUtilities.StartProcessNoWait(String, String, String)', object 'proc' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'proc' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="30">In method 'ProcessUtilities.StartProcessNoWait(String, String, String)', correct the spelling of 'Dir' in parameter name 'processDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="30">In method 'ProcessUtilities.StartProcessNoWait(String, String, String)', correct the spelling of 'proc' in parameter name 'procFilename' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartProcessWaitForExit(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="44">In member 'ProcessUtilities.StartProcessWaitForExit(String, String, String)', the discrete term 'Filename' in parameter name 'procFilename' should be expressed as a compound word, 'FileName'.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="46">In method 'ProcessUtilities.StartProcessWaitForExit(String, String, String)', call System.IDisposable.Dispose on object 'proc' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="44">In method 'ProcessUtilities.StartProcessWaitForExit(String, String, String)', correct the spelling of 'Dir' in parameter name 'processDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ProcessUtilities.cs" Line="44">In method 'ProcessUtilities.StartProcessWaitForExit(String, String, String)', correct the spelling of 'proc' in parameter name 'procFilename' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RegisterEditor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'RegisterEditor' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#InitEpiaService(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="40">Method 'RegisterEditor.InitEpiaService(String)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: "TestTool RegisterEditor   InitEpiaService Error:, SOFTWARE\Egemin\EPIA\, \E'pia...".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="38">Modify 'RegisterEditor.InitEpiaService(String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Epia" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="12">Correct the spelling of 'Epia' in member name 'RegisterEditor.InitEpiaService(String)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="E'pia" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="40">Correct the spelling of the unrecognized token 'E'pia' in the literal '"\E'pia Service\"'.</Issue>
            </Message>
            <Message Id="Egemin" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="40">Correct the spelling of the unrecognized token 'Egemin' in the literal '"SOFTWARE\Egemin\EPIA\"'.</Issue>
            </Message>
            <Message Id="InitEpiaService" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="40">Correct the spelling of the unrecognized token 'InitEpiaService' in the literal '"TestTool RegisterEditor   InitEpiaService Error:"'.</Issue>
            </Message>
            <Message Id="RegisterEditor" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="40">Correct the spelling of the unrecognized token 'RegisterEditor' in the literal '"TestTool RegisterEditor   InitEpiaService Error:"'.</Issue>
            </Message>
            <Message Id="TestTool" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="40">Correct the spelling of the unrecognized token 'TestTool' in the literal '"TestTool RegisterEditor   InitEpiaService Error:"'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="40">Change 'RegisterEditor.InitEpiaService(String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetEpiaServiceRegisterNameAndValue(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="55">Method 'RegisterEditor.SetEpiaServiceRegisterNameAndValue(String, String, String)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: "TestTool RegisterEditor  SetEpiaServiceRegisterNameAndValue Error:, SOFTWARE\Eg...".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="53">Modify 'RegisterEditor.SetEpiaServiceRegisterNameAndValue(String, String, String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Epia" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="46">Correct the spelling of 'Epia' in member name 'RegisterEditor.SetEpiaServiceRegisterNameAndValue(String, String, String)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="E'pia" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="55">Correct the spelling of the unrecognized token 'E'pia' in the literal '"\E'pia Service\"'.</Issue>
            </Message>
            <Message Id="Egemin" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="55">Correct the spelling of the unrecognized token 'Egemin' in the literal '"SOFTWARE\Egemin\EPIA\"'.</Issue>
            </Message>
            <Message Id="RegisterEditor" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="55">Correct the spelling of the unrecognized token 'RegisterEditor' in the literal '"TestTool RegisterEditor  SetEpiaServiceRegisterNameAndValue Error:"'.</Issue>
            </Message>
            <Message Id="SetEpiaServiceRegisterNameAndValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="55">Correct the spelling of the unrecognized token 'SetEpiaServiceRegisterNameAndValue' in the literal '"TestTool RegisterEditor  SetEpiaServiceRegisterNameAndValue Error:"'.</Issue>
            </Message>
            <Message Id="TestTool" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="55">Correct the spelling of the unrecognized token 'TestTool' in the literal '"TestTool RegisterEditor  SetEpiaServiceRegisterNameAndValue Error:"'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="55">Change 'RegisterEditor.SetEpiaServiceRegisterNameAndValue(String, String, String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRegister(System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="77">Method 'RegisterEditor.SetRegister(String, String, String, String, String)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: "DeployTestLogic.Tester  UpdateLauncher Register Error:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="75">Modify 'RegisterEditor.SetRegister(String, String, String, String, String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="62">In method 'RegisterEditor.SetRegister(String, String, String, String, String)', correct the spelling of 'str' in parameter name 'strKey' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="DeployTestLogic" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="77">Correct the spelling of the unrecognized token 'DeployTestLogic' in the literal '"DeployTestLogic.Tester  UpdateLauncher Register Error:"'.</Issue>
            </Message>
            <Message Id="UpdateLauncher" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="77">Correct the spelling of the unrecognized token 'UpdateLauncher' in the literal '"DeployTestLogic.Tester  UpdateLauncher Register Error:"'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="68">Because the behavior of 'String.ToUpper()' could vary based on the current user's locale settings, replace this call in 'RegisterEditor.SetRegister(String, String, String, String, String)' with a call to 'String.ToUpper(CultureInfo)'. If the result of 'String.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="71">Because the behavior of 'String.ToUpper()' could vary based on the current user's locale settings, replace this call in 'RegisterEditor.SetRegister(String, String, String, String, String)' with a call to 'String.ToUpper(CultureInfo)'. If the result of 'String.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="77">Change 'RegisterEditor.SetRegister(String, String, String, String, String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="68">In externally visible method 'RegisterEditor.SetRegister(String, String, String, String, String)', validate parameter 'type' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="RegisterEditor.cs" Line="71">In externally visible method 'RegisterEditor.SetRegister(String, String, String, String, String)', validate parameter 'kind' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SendMouseInputFlags" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in type name 'SendMouseInputFlags' with an appropriate alternate or remove it entirely.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ShellUIConst" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#cBkBusCouplerView" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Bk' in member name 'ShellUIConst.cBkBusCouplerView' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cBkBusCouplerView' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cButton" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cButton' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CButtonByClassName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Class" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="344">In member 'ShellUIConst.CButtonByClassName(String)', correct the casing of 'Class' in parameter name 'ClassName' by changing it to 'class'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CButtonByID(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="335">Correct the casing of 'ID' in member name 'ShellUIConst.CButtonByID(String)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="335">In member 'ShellUIConst.CButtonByID(String)', correct the casing of 'ID' in parameter name 'ID' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CButtonByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="326">In member 'ShellUIConst.CButtonByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CButtonByNameAndId(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Id" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="354">In member 'ShellUIConst.CButtonByNameAndId(String, String)', correct the casing of 'Id' in parameter name 'Id' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="354">In member 'ShellUIConst.CButtonByNameAndId(String, String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cButtonCancel" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cButtonCancel' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cButtonConfirm" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cButtonConfirm' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cButtonOK" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cButtonOK' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cCheckBox" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cCheckBox' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CCheckBoxByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="364">In member 'ShellUIConst.CCheckBoxByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cCheckBoxEnabled" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cCheckBoxEnabled' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cComboBox" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cComboBox' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CComboBoxByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="375">In member 'ShellUIConst.CComboBoxByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cConfirmationDialogViewCustom" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cConfirmationDialogViewCustom' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cCustom" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cCustom' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cCustomBkBitView" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Bk' in member name 'ShellUIConst.cCustomBkBitView' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cCustomBkBitView' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cCustomBkDigIOTerminalView" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Bk' in member name 'ShellUIConst.cCustomBkDigIOTerminalView' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cCustomBkDigIOTerminalView' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CCustomById(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Id" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="512">In member 'ShellUIConst.CCustomById(String)', correct the casing of 'Id' in parameter name 'Id' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cCustomCreateEditDialogView" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cCustomCreateEditDialogView' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cCustomVirtualBitView" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cCustomVirtualBitView' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cDataGrid" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cDataGrid' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cDataItem" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cDataItem' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cEdit" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cEdit' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CEditByID(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="431">Correct the casing of 'ID' in member name 'ShellUIConst.CEditByID(String)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Id" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="431">In member 'ShellUIConst.CEditByID(String)', correct the casing of 'Id' in parameter name 'Id' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cElement" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cElement' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CElementByClassName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Class" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="458">In member 'ShellUIConst.CElementByClassName(String)', correct the casing of 'Class' in parameter name 'ClassName' by changing it to 'class'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CElementById(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Id" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="449">In member 'ShellUIConst.CElementById(String)', correct the casing of 'Id' in parameter name 'Id' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CElementByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="440">In member 'ShellUIConst.CElementByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cErrorDialogViewCustom" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cErrorDialogViewCustom' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cGroup" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cGroup' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CGroupByClassName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Class" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="585">In member 'ShellUIConst.CGroupByClassName(String)', correct the casing of 'Class' in parameter name 'ClassName' by changing it to 'class'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CGroupByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="596">In member 'ShellUIConst.CGroupByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cGroupElement" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cGroupElement' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cImage" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cImage' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cList" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cList' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cListBox" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cListBox' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CListByClassName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Class" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="615">In member 'ShellUIConst.CListByClassName(String)', correct the casing of 'Class' in parameter name 'ClassName' by changing it to 'class'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CListById(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Id" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="606">In member 'ShellUIConst.CListById(String)', correct the casing of 'Id' in parameter name 'Id' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cListItem" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cListItem' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CListItemByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="644">In member 'ShellUIConst.CListItemByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cListItemElement" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cListItemElement' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cListView" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cListView' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CListViewByClassName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="classname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="634">In method 'ShellUIConst.CListViewByClassName(String)', correct the spelling of 'classname' in parameter name 'classname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CListViewByID(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="624">Correct the casing of 'ID' in member name 'ShellUIConst.CListViewByID(String)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="624">In member 'ShellUIConst.CListViewByID(String)', correct the casing of 'ID' in parameter name 'ID' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cListViewTerminals" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cListViewTerminals' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cMenu" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cMenu' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CMenuByClassName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="95">In member 'ShellUIConst.CMenuByClassName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cMenuItem" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cMenuItem' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CMenuItemByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="467">In member 'ShellUIConst.CMenuItemByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cMenuItemElement" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cMenuItemElement' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPaneByClassName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Class" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="485">In member 'ShellUIConst.CPaneByClassName(String)', correct the casing of 'Class' in parameter name 'ClassName' by changing it to 'class'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPaneByID(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="662">Correct the casing of 'ID' in member name 'ShellUIConst.CPaneByID(String)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="662">In member 'ShellUIConst.CPaneByID(String)', correct the casing of 'ID' in parameter name 'ID' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPaneByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="476">In member 'ShellUIConst.CPaneByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CRadioButtonByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="539">In member 'ShellUIConst.CRadioButtonByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cRadioButtonHigh" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cRadioButtonHigh' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cRadioButtonLow" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cRadioButtonLow' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cRadioButtonOff" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cRadioButtonOff' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cRadioButtonOn" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cRadioButtonOn' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cScrollBar" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cScrollBar' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cTab" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cTab' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cTabItem" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cTabItem' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CTabItemByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="676">In member 'ShellUIConst.CTabItemByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cTable" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cTable' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cText" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cText' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CTextByClassName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="548">In member 'ShellUIConst.CTextByClassName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CTextByClassNameAndName(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Class" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="697">In member 'ShellUIConst.CTextByClassNameAndName(String, String)', correct the casing of 'Class' in parameter name 'ClassName' by changing it to 'class'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="697">In member 'ShellUIConst.CTextByClassNameAndName(String, String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CTextByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="687">In member 'ShellUIConst.CTextByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cTextElement" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cTextElement' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cTextIsOffScreen" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cTextIsOffScreen' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cTextIsOnScreen" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OnScreen" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'OnScreen' in member name 'ShellUIConst.cTextIsOnScreen' exists as a discrete term. If your usage is intended to be single word, case it as 'Onscreen' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cTextIsOnScreen' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cToolBar" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cToolBar' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CTreeByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="707">In member 'ShellUIConst.CTreeByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cTreeItem" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cTreeItem' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CTreeItemByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="734">In member 'ShellUIConst.CTreeItemByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cTreeItemIsOnScreen" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OnScreen" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'OnScreen' in member name 'ShellUIConst.cTreeItemIsOnScreen' exists as a discrete term. If your usage is intended to be single word, case it as 'Onscreen' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cTreeItemIsOnScreen' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CUIByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CUI" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="315">Correct the casing of 'CUI' in member name 'ShellUIConst.CUIByName(String)' by changing it to 'Cui'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="315">In member 'ShellUIConst.CUIByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cWindow" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ShellUIConst.cWindow' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CWindowById(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Id" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="576">In member 'ShellUIConst.CWindowById(String)', correct the casing of 'Id' in parameter name 'Id' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CWindowByName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="ShellUIConst.cs" Line="567">In member 'ShellUIConst.CWindowByName(String)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestListUtilities" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'TestListUtilities' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#IsAllTestDefinitionsTested(System.String[],System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="21">Method 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: " testdefinition : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="32">Method 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "++++++ test def type tested : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="39">Method 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "------ test def type not tested : ".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="46">Method 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: "IsAllTestDefinitionsTested".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="46">Method 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: "Exception  , ---".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="44">Modify 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="13">Consider a design that does not require that 'sErrorMessage' be a reference parameter.</Issue>
            </Message>
            <Message Id="m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="13">In method 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)', correct the spelling of 'm' in parameter name 'mTestDefinitionTypes' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="13">In method 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)', correct the spelling of 's' in parameter name 'sErrorMessage' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="13">In method 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)', correct the spelling of 's' in parameter name 'sTestResultFolder' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="IsAllTestDefinitionsTested" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="46">Correct the spelling of the unrecognized token 'IsAllTestDefinitionsTested' in the literal '"IsAllTestDefinitionsTested"'.</Issue>
            </Message>
            <Message Id="def" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="32">Correct the spelling of the unrecognized token 'def' in the literal '"++++++ test def type tested : "'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="39">Correct the spelling of the unrecognized token 'def' in the literal '"------ test def type not tested : "'.</Issue>
            </Message>
            <Message Id="testdefinition" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="21">Correct the spelling of the unrecognized token 'testdefinition' in the literal '" testdefinition : "'.</Issue>
            </Message>
            <Message Id="sErrorMessage" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="13">Parameter 'sErrorMessage' of 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="21">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="46">Change 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="29">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="19">In externally visible method 'TestListUtilities.IsAllTestDefinitionsTested(String(), String, ByRef String)', validate parameter 'mTestDefinitionTypes' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsAllTestStatusPassed(System.String,System.String[],System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="205">Method 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "&lt;&lt;&lt; testinfos[, ] : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="215">Method 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "&lt;&lt;&lt; teststatus[, ] : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="199">Method 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "&lt;&lt;&lt;&gt;&gt;&gt;&gt; testinfos.Length : ".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="236">Method 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: "IsAllTestStatusPassed:testinfos.Length: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="236">Method 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: " exception  , ---".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="234">Modify 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="194">Consider a design that does not require that 'sErrorMessage' be a reference parameter.</Issue>
            </Message>
            <Message Id="m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="194">In method 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)', correct the spelling of 'm' in parameter name 'mTestDefinitionTypes' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="194">In method 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)', correct the spelling of 's' in parameter name 'sErrorMessage' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="194">In method 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)', correct the spelling of 's' in parameter name 'sTestResultFolder' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="IsAllTestStatusPassed" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="236">Correct the spelling of the unrecognized token 'IsAllTestStatusPassed' in the literal '"IsAllTestStatusPassed:testinfos.Length: "'.</Issue>
            </Message>
            <Message Id="testinfos" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="205">Correct the spelling of the unrecognized token 'testinfos' in the literal '"&lt;&lt;&lt; testinfos["'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="199">Correct the spelling of the unrecognized token 'testinfos' in the literal '"&lt;&lt;&lt;&gt;&gt;&gt;&gt; testinfos.Length : "'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="236">Correct the spelling of the unrecognized token 'testinfos' in the literal '"IsAllTestStatusPassed:testinfos.Length: "'.</Issue>
            </Message>
            <Message Id="teststatus" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="215">Correct the spelling of the unrecognized token 'teststatus' in the literal '"&lt;&lt;&lt; teststatus["'.</Issue>
            </Message>
            <Message Id="mTestDefinitionTypes" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="194">Parameter 'mTestDefinitionTypes' of 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="sErrorMessage" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="194">Parameter 'sErrorMessage' of 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="247">Because the behavior of 'Date.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Date.ToString(IFormatProvider)'. If the result of 'Date.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="199">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="200">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="205">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="206">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="215">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="216">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="228">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="236">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="240">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="241">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="236">Change 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="210">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="213">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="217">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String, String(), String, ByRef String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsAllTestStatusPassed(System.String[],System.String,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="64">Method 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "&lt;&lt;&lt; testinfos[, ] : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="81">Method 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "&lt;&lt;&lt; testinfos[, ] : ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="59">Method 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "&lt;&lt;&lt;&gt;&gt;&gt;&gt; testinfos.Length : ".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="92">Method 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: "IsAllTestStatusPassed:testinfos.Length: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="92">Method 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(String, String)'. Retrieve the following string(s) from a resource table instead: " exception  , ---".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="90">Modify 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="54">Consider a design that does not require that 'sErrorMessage' be a reference parameter.</Issue>
            </Message>
            <Message Id="m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="54">In method 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)', correct the spelling of 'm' in parameter name 'mTestDefinitionTypes' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="54">In method 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)', correct the spelling of 's' in parameter name 'sErrorMessage' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="54">In method 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)', correct the spelling of 's' in parameter name 'sTestResultFolder' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="IsAllTestStatusPassed" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="92">Correct the spelling of the unrecognized token 'IsAllTestStatusPassed' in the literal '"IsAllTestStatusPassed:testinfos.Length: "'.</Issue>
            </Message>
            <Message Id="testinfos" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="64">Correct the spelling of the unrecognized token 'testinfos' in the literal '"&lt;&lt;&lt; testinfos["'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="81">Correct the spelling of the unrecognized token 'testinfos' in the literal '"&lt;&lt;&lt; testinfos["'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="59">Correct the spelling of the unrecognized token 'testinfos' in the literal '"&lt;&lt;&lt;&gt;&gt;&gt;&gt; testinfos.Length : "'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="92">Correct the spelling of the unrecognized token 'testinfos' in the literal '"IsAllTestStatusPassed:testinfos.Length: "'.</Issue>
            </Message>
            <Message Id="mTestDefinitionTypes" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="54">Parameter 'mTestDefinitionTypes' of 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="sErrorMessage" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="54">Parameter 'sErrorMessage' of 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="101">Because the behavior of 'Date.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' with a call to 'Date.ToString(IFormatProvider)'. If the result of 'Date.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="59">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="64">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="81">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="92">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture()' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture()'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="92">Change 'TestListUtilities.IsAllTestStatusPassed(String(), String, ByRef String)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateStatusInTestInfoFile(System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="182">Object 'reader' can be disposed more than once in method 'TestListUtilities.UpdateStatusInTestInfoFile(String, String, String, String)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 182</Issue>
            </Message>
            <Message Id="TestTools.MessageBoxEx.Show(System.String,System.String,System.UInt32)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="175">Method 'TestListUtilities.UpdateStatusInTestInfoFile(String, String, String, String)' passes a literal string as parameter 'caption' of a call to 'MessageBoxEx.Show(String, String, UInteger)'. Retrieve the following string(s) from a resource table instead: "UpdateStatusInTestInfoFile Exception".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="166">Method 'TestListUtilities.UpdateStatusInTestInfoFile(String, String, String, String)' passes a literal string as parameter 'caption' of a call to 'MessageBoxEx.Show(String, String, UInteger)'. Retrieve the following string(s) from a resource table instead: "UpdateStatusInTestInfoFile IOException".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="166">Method 'TestListUtilities.UpdateStatusInTestInfoFile(String, String, String, String)' passes a literal string as parameter 'text' of a call to 'MessageBoxEx.Show(String, String, UInteger)'. Retrieve the following string(s) from a resource table instead: " --- , " &amp; ChrW(10) &amp; "Will try to reconnect the Server ...".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="175">Method 'TestListUtilities.UpdateStatusInTestInfoFile(String, String, String, String)' passes a literal string as parameter 'text' of a call to 'MessageBoxEx.Show(String, String, UInteger)'. Retrieve the following string(s) from a resource table instead: " --- , " &amp; ChrW(10) &amp; "Will try to reconnect the Server ...".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="172">Modify 'TestListUtilities.UpdateStatusInTestInfoFile(String, String, String, String)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="IOException" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="166">Correct the spelling of the unrecognized token 'IOException' in the literal '"UpdateStatusInTestInfoFile IOException"'.</Issue>
            </Message>
            <Message Id="UpdateStatusInTestInfoFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="175">Correct the spelling of the unrecognized token 'UpdateStatusInTestInfoFile' in the literal '"UpdateStatusInTestInfoFile Exception"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="166">Correct the spelling of the unrecognized token 'UpdateStatusInTestInfoFile' in the literal '"UpdateStatusInTestInfoFile IOException"'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="TestListUtilities.cs" Line="139">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'TestListUtilities.UpdateStatusInTestInfoFile(String, String, String, String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UITestUtility" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'UITestUtility' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ClickOn(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="12">In method 'UITestUtility.ClickOn(IntPtr)', correct the spelling of 'h' in parameter name 'hControl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindTopLevelWindow(System.String,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="48">Method 'UITestUtility.FindTopLevelWindow(String, Integer, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Form has been found".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="42">Method 'UITestUtility.FindTopLevelWindow(String, Integer, Integer)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(String)'. Retrieve the following string(s) from a resource table instead: "Form not yet found".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindWindow(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="lp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.FindWindow(String, String)', correct the spelling of 'lp' in parameter name 'lpClassName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.FindWindow(String, String)', correct the spelling of 'lp' in parameter name 'lpWindowName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.FindWindow(String, String)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.FindWindow(String, String)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpClassName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpWindowName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindWindowByIndex(System.IntPtr,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="hwnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="66">In method 'UITestUtility.FindWindowByIndex(IntPtr, Integer)', correct the spelling of 'hwnd' in parameter name 'hwndParent' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="hwnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.FindWindowEx(IntPtr, IntPtr, String, String)', correct the spelling of 'hwnd' in parameter name 'hwndChildAfter' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.FindWindowEx(IntPtr, IntPtr, String, String)', correct the spelling of 'hwnd' in parameter name 'hwndParent' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="lpsz" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.FindWindowEx(IntPtr, IntPtr, String, String)', correct the spelling of 'lpsz' in parameter name 'lpszClass' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.FindWindowEx(IntPtr, IntPtr, String, String)', correct the spelling of 'lpsz' in parameter name 'lpszWindow' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError">Either replace the suffix 'Ex' in member name 'UITestUtility.FindWindowEx(IntPtr, IntPtr, String, String)' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.FindWindowEx(IntPtr, IntPtr, String, String)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.FindWindowEx(IntPtr, IntPtr, String, String)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="2" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszClass' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="3" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszWindow' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllParameters(System.String,System.String&amp;,System.String&amp;,System.String&amp;,System.String&amp;,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="100">Consider a design that does not require that 'buildBaseDir' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="100">Consider a design that does not require that 'buildNr' be a reference parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="100">Consider a design that does not require that 'testApp' be a reference parameter.</Issue>
            </Message>
            <Message Id="4#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="100">Consider a design that does not require that 'buildDef' be a reference parameter.</Issue>
            </Message>
            <Message Id="5#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="100">Consider a design that does not require that 'buildConfig' be a reference parameter.</Issue>
            </Message>
            <Message Id="Nr" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="100">In member 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the casing of 'Nr' in parameter name 'buildNr' by changing it to 'NR'.</Issue>
            </Message>
            <Message Id="Def" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="100">In method 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'Def' in parameter name 'buildDef' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="100">In method 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'Dir' in parameter name 'buildBaseDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="100">In method 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', correct the spelling of 'Dir' in parameter name 'installScriptsDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="109">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="110">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="113">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="104">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="106">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="109">In externally visible method 'UITestUtility.GetAllParameters(String, ByRef String, ByRef String, ByRef String, ByRef String, ByRef String)', validate local variable ''(*buildNr)'', which was reassigned from parameter 'buildNr', before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getBuildBasePath(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="128">Correct the casing of 'get' in member name 'UITestUtility.getBuildBasePath(String)' by changing it to 'Get'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="134">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.getBuildBasePath(String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="129">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.getBuildBasePath(String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="139">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.getBuildBasePath(String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="134">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.getBuildBasePath(String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="129">In externally visible method 'UITestUtility.getBuildBasePath(String)', validate parameter 'path' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getBuildnr(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="153">Correct the casing of 'get' in member name 'UITestUtility.getBuildnr(String)' by changing it to 'Get'.</Issue>
            </Message>
            <Message Id="Buildnr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="153">Correct the spelling of 'Buildnr' in member name 'UITestUtility.getBuildnr(String)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="159">Because the behavior of 'String.IndexOf(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.getBuildnr(String)' with a call to 'String.IndexOf(String, StringComparison)'. If the result of 'String.IndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="155">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.getBuildnr(String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="163">Because the behavior of 'String.LastIndexOf(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.getBuildnr(String)' with a call to 'String.LastIndexOf(String, StringComparison)'. If the result of 'String.LastIndexOf(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="159">Because the behavior of 'String.StartsWith(String)' could vary based on the current user's locale settings, replace this call in 'UITestUtility.getBuildnr(String)' with a call to 'String.StartsWith(String, StringComparison)'. If the result of 'String.StartsWith(String, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="155">In externally visible method 'UITestUtility.getBuildnr(String)', validate parameter 'path' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMenu(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.GetMenu(IntPtr)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.GetMenu(IntPtr)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.GetMenu(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.GetMenu(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMenuItemID(System.IntPtr,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'UITestUtility.GetMenuItemID(IntPtr, Integer)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Pos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.GetMenuItemID(IntPtr, Integer)', correct the spelling of 'Pos' in parameter name 'nPos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.GetMenuItemID(IntPtr, Integer)', correct the spelling of 'h' in parameter name 'hMenu' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.GetMenuItemID(IntPtr, Integer)', correct the spelling of 'n' in parameter name 'nPos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.GetMenuItemID(IntPtr, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.GetMenuItemID(IntPtr, Integer)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSubMenu(System.IntPtr,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SubMenu" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SubMenu' in member name 'UITestUtility.GetSubMenu(IntPtr, Integer)' exists as a discrete term. If your usage is intended to be single word, case it as 'Submenu' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Pos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.GetSubMenu(IntPtr, Integer)', correct the spelling of 'Pos' in parameter name 'nPos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.GetSubMenu(IntPtr, Integer)', correct the spelling of 'h' in parameter name 'hMenu' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.GetSubMenu(IntPtr, Integer)', correct the spelling of 'n' in parameter name 'nPos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.GetSubMenu(IntPtr, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.GetSubMenu(IntPtr, Integer)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostMessage1(System.IntPtr,System.UInt32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)', correct the casing of 'Msg' in parameter name 'Msg' by changing it to 'msg'.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'Msg' in parameter name 'Msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'wParam' of P/Invoke 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
            <Message Id="3" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'lParam' of P/Invoke 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.PostMessage1(IntPtr, UInteger, Integer, Integer)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendChar(System.IntPtr,System.Char)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="194">In method 'UITestUtility.SendChar(IntPtr, Char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="194">In method 'UITestUtility.SendChar(IntPtr, Char)', correct the spelling of 'h' in parameter name 'hControl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendChars(System.IntPtr,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="200">In method 'UITestUtility.SendChars(IntPtr, String)', correct the spelling of 'h' in parameter name 'hControl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="200">In method 'UITestUtility.SendChars(IntPtr, String)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\AutomaticTests514\Source\TestTools" File="UITestUtility.cs" Line="201">In externally visible method 'UITestUtility.SendChars(IntPtr, String)', validate parameter 's' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage1(System.IntPtr,System.UInt32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)', correct the casing of 'Msg' in parameter name 'Msg' by changing it to 'msg'.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'Msg' in parameter name 'Msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'wParam' of P/Invoke 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
            <Message Id="3" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'lParam' of P/Invoke 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)' will be 0 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 4 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Void'.</Issue>
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)' will be 0 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Void'.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.SendMessage1(IntPtr, UInteger, Integer, Integer)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage2(System.IntPtr,System.UInt32,System.Int32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)', correct the casing of 'Msg' in parameter name 'Msg' by changing it to 'msg'.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)', correct the spelling of 'Msg' in parameter name 'Msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'wParam' of P/Invoke 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)' will be 0 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 4 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Void'.</Issue>
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)' will be 0 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Void'.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.SendMessage2(IntPtr, UInteger, Integer, IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage3(System.IntPtr,System.UInt32,System.Int32,System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())', correct the casing of 'Msg' in parameter name 'Msg' by changing it to 'msg'.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())', correct the spelling of 'Msg' in parameter name 'Msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())', correct the spelling of 'Wnd' in parameter name 'hWndControl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())', correct the spelling of 'h' in parameter name 'hWndControl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'wParam' of P/Invoke 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.SendMessage3(IntPtr, UInteger, Integer, Byte())' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage4(System.IntPtr,System.UInt32,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)', correct the casing of 'Msg' in parameter name 'Msg' by changing it to 'msg'.</Issue>
            </Message>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)', correct the spelling of 'Msg' in parameter name 'Msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'wParam' of P/Invoke 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'Integer'.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'UITestUtility.SendMessage4(IntPtr, UInteger, Integer, String)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="3" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2021-11-07 23:07:47Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lParam' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505">
   <Name>Avoid unmaintainable code</Name>
   <Description>Types and methods with a high degree of class coupling, cyclomatic complexity and/or program length can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} has a maintainability index of {1}. Rewrite or refactor the method to increase its maintainability index (MI). An MI below {2} indicates poor maintainability, an MI between {2} and {3} indicates moderate maintainability, and an MI above {3} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386043.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Resolution Name="MemberShouldBeCompoundWord">The discrete term '{0}' in member name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 182</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotHardcodeLocaleSpecificStrings" Category="Microsoft.Globalization" CheckId="CA1302">
   <Name>Do not hardcode locale specific strings</Name>
   <Description>Do not use string literals for system items that have locale-specific designations. Special system locations should be retrieved using provided API such as GetFolderPath. See the System.Environment.SpecialFolder enumeration for more information.</Description>
   <Resolution Name="Default">If the literal '{0}' used in method {1} refers to a special system location, replace it with a call to Environment.GetFolderPath.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182186.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="HResultOrErrorCode">{0} calls {1} but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be a reference parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182146.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="DelegateParameterAbbreviation">In delegate {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'. '{3}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberAbbreviation">Correct the casing of '{0}' in member name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="MemberParameterAbbreviation">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'. '{3}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="DelegateParameter">In delegate {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Resolution Name="Type">Remove the underscores from type name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="MemberNewerVersion">Either replace the suffix '{0}' in member name {1} with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Resolution>
   <Resolution Name="TypeNewerVersion">Either replace the suffix '{0}' in type name {1} with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the type it replaces.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414">
   <Name>Mark boolean P/Invoke arguments with MarshalAs</Name>
   <Description>All boolean P/Invoke parameters and return types should be explicitly marked with the MarshalAs attribute. By default, the system will marshal all booleans as 4-byte UnmanagedType.Bool. This is the correct behavior for Win32 'BOOL' arguments but incorrect for C++ 'bool' arguments, which should be marshaled as 1-byte UnmanagedType.U1. For code maintainability reasons, always explicitly specify the marshaling information for boolean arguments and return values.</Description>
   <Resolution Name="Return">Add the MarshalAsAttribute to the return type of P/Invoke {0}. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182206.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
   <Name>Operations should not overflow</Name>
   <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
   <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182354.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901">
   <Name>P/Invoke declarations should be portable</Name>
   <Description>.</Description>
   <Resolution Name="Parameter">As it is declared in your code, parameter {0} of P/Invoke {1} will be {2} bytes wide on {3} platforms. This is not correct, as the actual native declaration of this API indicates it should be {4} bytes wide on {3} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {5}.</Resolution>
   <Resolution Name="Return">As it is declared in your code, the return type of P/Invoke {0} will be {1} bytes wide on {2} platforms. This is not correct, as the actual native declaration of this API indicates it should be {3} bytes wide on {2} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182284(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="portabilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes should not be visible</Name>
   <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
   <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182209.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111">
   <Name>Pointers should not be visible</Name>
   <Description>IntPtr and UIntPtr fields should be declared as private. Exposing non-private pointers can cause a security weakness.</Description>
   <Resolution Name="Default">Make {0} private.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182306.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="Parameter">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Resolution Name="ParameterImplicitAnsi">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182319.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300">
   <Name>Specify MessageBoxOptions</Name>
   <Description>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</Description>
   <Resolution Name="Default">Change {0} to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182191.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="Default">Because type {0} contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="UseManagedEquivalentsOfWin32Api" Category="Microsoft.Usage" CheckId="CA2205">
   <Name>Use managed equivalents of Win32 API</Name>
   <Description>Use managed equivalents to Win32 API whenever possible.</Description>
   <Resolution Name="PlatformInvokeDeclaration">Remove the declaration for {0}. Callers should use the following managed alternative: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182365.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberParameterNoAlternate">In member {0}, replace the term '{1}' in parameter name {2} with an appropriate alternate or remove it entirely.</Resolution>
   <Resolution Name="TypeNoAlternate">Replace the term '{0}' in type name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="UseSafeHandleToEncapsulateNativeResources" Category="Microsoft.Reliability" CheckId="CA2006">
   <Name>Use SafeHandle to encapsulate native resources</Name>
   <Description>Use of IntPtr in managed code may indicate a potential security and reliability problem. All uses of IntPtr must be reviewed to determine whether use of a SafeHandle (or similar technology) is required in its place. Problems will occur if the IntPtr represents some native resource (memory, file handle, socket etc.) that managed code is considered to own. I.e. managed code is expected to in some way release the resource and failure to do so would cause resource leakage. In such scenarios security or reliability problems will also exist if multithreaded access is allowed to the IntPtr and a means of releasing the resource represented by the IntPtr. These problems involve recycling of the IntPtr value on resource release while simultaneous use of the resource is being made on another thread, leading to race conditions where one thread can read or write data associated with the wrong resource. For example, if your type stores an OS handle as an IntPtr and allows users to call both Close and any other method using that handle simultaneously (without some kind of synchronization), your code has a handle recycling problem, which causes data corruption and often a security vulnerability. SafeHandle (and its sibling class CriticalHandle) provide a mechanism for encapsulating a native handle to a resource so that such threading problems can be avoided (along with other issues such as the need to carefully control the lifetime of managed objects that contain a copy of the native handle over calls to native methods; ie, you can often remove calls to GC.KeepAlive). There are performance overheads implicit in using SafeHandle (and, to a lesser degree, CriticalHandle) which can often be mitigated through careful design.</Description>
   <Resolution Name="Default">Review usage of {0} (a {1} instance) to determine whether it should be replaced with a SafeHandle or CriticalHandle.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182294.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="reliabilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Resolution Name="Reassigned">In externally visible method {0}, validate local variable '{1}', which was reassigned from parameter '{2}', before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
